/*
 * SPDX-License-Identifier: Apache-2.0
 * Copyright Blazebit
 */
package com.blazebit.query.connector.aws.iam;

import software.amazon.awssdk.services.iam.model.GetAccountSummaryResponse;
import software.amazon.awssdk.services.iam.model.MFADevice;
import software.amazon.awssdk.services.iam.model.PasswordPolicy;
import software.amazon.awssdk.services.iam.model.SummaryKeyType;
import software.amazon.awssdk.services.iam.model.User;

import java.time.Instant;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class TestObjects {

	private TestObjects() {
	}

	public static User userWithMfa() {
		return User.builder()
				.path( "/" )
				.userName( "userWithMFA" )
				.userId( "AIDAJDPLRKL123123" )
				.arn( "arn:aws:iam::123456789012:user/userWithMFA" )
				.createDate( Instant.parse( "2024-07-15T12:41:28+00:00" ) )
				.passwordLastUsed( Instant.parse( "2024-07-15T12:41:28+00:00" ) )
				.build();
	}

	public static MFADevice mfaDevice() {
		return MFADevice.builder()
				.userName( "userWithMFA" )
				.serialNumber( "arn:aws:iam::123456789012:mfa/test" )
				.enableDate( Instant.parse( "2024-07-15T12:41:28+00:00" ) )
				.build();
	}

	public static List<PasswordPolicy> defaultAccountPasswordPolicy() {
		return Collections.singletonList( PasswordPolicy.builder()
				.minimumPasswordLength( 8 )
				.requireSymbols( false )
				.requireNumbers( false )
				.requireUppercaseCharacters( true )
				.requireLowercaseCharacters( true )
				.allowUsersToChangePassword( true )
				.maxPasswordAge( 90 )
				.passwordReusePrevention( 5 )
				.hardExpiry( false )
				.build() );
	}

	// Data generated by AWS Cli:
	// $aws iam get-account-summary --profile admindev
	public static AccountSummary accountSummary() {
		var test =
				GetAccountSummaryResponse.builder()
						.summaryMap(
								Map.ofEntries(
										Map.entry( SummaryKeyType.GROUP_POLICY_SIZE_QUOTA, 0 ),
										Map.entry( SummaryKeyType.POLICIES, 0 ),
										Map.entry( SummaryKeyType.GROUPS_PER_USER_QUOTA, 0 ),
										Map.entry( SummaryKeyType.ATTACHED_POLICIES_PER_USER_QUOTA, 0 ),
										Map.entry( SummaryKeyType.USERS, 5 ),
										Map.entry( SummaryKeyType.POLICIES_QUOTA, 10 ),
										Map.entry( SummaryKeyType.ACCOUNT_MFA_ENABLED, 1 ),
										Map.entry( SummaryKeyType.ACCESS_KEYS_PER_USER_QUOTA, 2 ),
										Map.entry( SummaryKeyType.POLICY_VERSIONS_IN_USE_QUOTA, 3 ),
										Map.entry( SummaryKeyType.GLOBAL_ENDPOINT_TOKEN_VERSION, 2 ),
										Map.entry( SummaryKeyType.VERSIONS_PER_POLICY_QUOTA, 1 ),
										Map.entry( SummaryKeyType.ATTACHED_POLICIES_PER_GROUP_QUOTA, 2 ),
										Map.entry( SummaryKeyType.POLICY_SIZE_QUOTA, 0 ),
										Map.entry( SummaryKeyType.GROUPS, 3 ),
										Map.entry( SummaryKeyType.ACCOUNT_SIGNING_CERTIFICATES_PRESENT, 0 ),
										Map.entry( SummaryKeyType.USERS_QUOTA, 6 ),
										Map.entry( SummaryKeyType.SERVER_CERTIFICATES_QUOTA, 3 ),
										Map.entry( SummaryKeyType.MFA_DEVICES, 1 ),
										Map.entry( SummaryKeyType.USER_POLICY_SIZE_QUOTA, 2 ),
										Map.entry( SummaryKeyType.POLICY_VERSIONS_IN_USE, 2 ),
										Map.entry( SummaryKeyType.SERVER_CERTIFICATES, 3 ),
										Map.entry( SummaryKeyType.SIGNING_CERTIFICATES_PER_USER_QUOTA, 2 ),
										Map.entry( SummaryKeyType.MFA_DEVICES_IN_USE, 1 ),
										Map.entry( SummaryKeyType.ATTACHED_POLICIES_PER_ROLE_QUOTA, 2 ),
										Map.entry( SummaryKeyType.ACCOUNT_ACCESS_KEYS_PRESENT, 1 ),
										Map.entry( SummaryKeyType.GROUPS_QUOTA, 5 ) ) )
						.build();
		return new AccountSummary( test.summaryMap() );
	}
}
