{
  "openapi": "3.0.0",
  "info": {
    "title": "Merged API",
    "description": "Merged Swagger specification from account, git and profile APIs",
    "version": "7.1"
  },
  "paths": {
    "/_apis/accounts": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "accounts",
        "x-ms-vss-method": "GetAccounts",
        "description": "Get a list of accounts for a specific owner or a specific member. One of the following parameters is required: ownerId, memberId.",
        "operationId": "Accounts_List",
        "parameters": [
          {
            "in": "query",
            "name": "ownerId",
            "description": "ID for the owner of the accounts.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "memberId",
            "description": "ID for a member of the accounts.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/deletedrepositories": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "deletedRepositories",
        "x-ms-vss-method": "GetDeletedRepositories",
        "description": "Retrieve deleted git repositories.",
        "operationId": "Repositories_Get Deleted Repositories",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitDeletedRepository"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/favorites/refs": {
      "post": {
        "tags": [
          "Refs Favorites"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "refsFavorites",
        "x-ms-vss-method": "CreateFavorite",
        "description": "Creates a ref favorite",
        "operationId": "Refs Favorites_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitRefFavorite"
              }
            }
          },
          "description": "The ref favorite to create.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRefFavorite"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Refs Favorites"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "refsFavorites",
        "x-ms-vss-method": "GetRefFavorites",
        "description": "Gets the refs favorites for a repo and an identity.",
        "operationId": "Refs Favorites_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repositoryId",
            "description": "The id of the repository.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "identityId",
            "description": "The id of the identity whose favorites are to be retrieved. If null, the requesting identity is used.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitRefFavorite"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/favorites/refs/{favoriteId}": {
      "delete": {
        "tags": [
          "Refs Favorites"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "refsFavorites",
        "x-ms-vss-method": "DeleteRefFavorite",
        "description": "Deletes the refs favorite specified",
        "operationId": "Refs Favorites_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "favoriteId",
            "description": "The Id of the ref favorite to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Refs Favorites"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "refsFavorites",
        "x-ms-vss-method": "GetRefFavorite",
        "description": "Gets the refs favorite for a favorite Id.",
        "operationId": "Refs Favorites_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "favoriteId",
            "description": "The Id of the requested ref favorite.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRefFavorite"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/policy/configurations": {
      "get": {
        "tags": [
          "Policy Configurations"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "policyConfigurations",
        "x-ms-vss-method": "GetPolicyConfigurations",
        "description": "Retrieve a list of policy configurations by a given set of scope/filtering criteria.\n\nBelow is a short description of how all of the query parameters interact with each other:\n- repositoryId set, refName set: returns all policy configurations that *apply* to a particular branch in a repository\n- repositoryId set, refName unset: returns all policy configurations that *apply* to a particular repository\n- repositoryId unset, refName unset: returns all policy configurations that are *defined* at the project level\n- repositoryId unset, refName set: returns all project-level branch policies, plus the project level configurations\nFor all of the examples above, when policyType is set, it'll restrict results to the given policy type",
        "operationId": "Policy Configurations_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "repositoryId",
            "description": "The repository id.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "refName",
            "description": "The fully-qualified Git ref name (e.g. refs/heads/master).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "policyType",
            "description": "The policy type filter.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Maximum number of policies to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "Pass a policy configuration ID to fetch the next page of results, up to top number of results, for this endpoint.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "x-ms-continuationtoken": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyConfiguration"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/pullrequests": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequests",
        "x-ms-vss-method": "GetPullRequestsByProject",
        "description": "Retrieve all pull requests matching a specified criteria.\n\nPlease note that description field will be truncated up to 400 symbols in the result.",
        "operationId": "Pull Requests_Get Pull Requests By Project",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.creatorId",
            "description": "If set, search for pull requests that were created by this identity.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.includeLinks",
            "description": "Whether to include the _links field on the shallow references",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.maxTime",
            "description": "If specified, filters pull requests that created/closed before this date based on the queryTimeRangeType specified.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.minTime",
            "description": "If specified, filters pull requests that created/closed after this date based on the queryTimeRangeType specified.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.queryTimeRangeType",
            "description": "The type of time range which should be used for minTime and maxTime. Defaults to Created if unset.",
            "required": false,
            "x-ms-enum": {
              "name": "PullRequestTimeRangeType",
              "values": [
                {
                  "value": "created",
                  "description": "The date when the pull request was created."
                },
                {
                  "value": "closed",
                  "description": "The date when the pull request was closed (completed, abandoned, or merged externally)."
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "closed"
              ]
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.repositoryId",
            "description": "If set, search for pull requests whose target branch is in this repository.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.reviewerId",
            "description": "If set, search for pull requests that have this identity as a reviewer.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.sourceRefName",
            "description": "If set, search for pull requests from this branch.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.sourceRepositoryId",
            "description": "If set, search for pull requests whose source branch is in this repository.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.status",
            "description": "If set, search for pull requests that are in this state. Defaults to Active if unset.",
            "required": false,
            "x-ms-enum": {
              "name": "PullRequestStatus",
              "values": [
                {
                  "value": "notSet",
                  "description": "Status not set. Default state."
                },
                {
                  "value": "active",
                  "description": "Pull request is active."
                },
                {
                  "value": "abandoned",
                  "description": "Pull request is abandoned."
                },
                {
                  "value": "completed",
                  "description": "Pull request is completed."
                },
                {
                  "value": "all",
                  "description": "Used in pull request search criteria to include all statuses."
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "notSet",
                "active",
                "abandoned",
                "completed",
                "all"
              ]
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.targetRefName",
            "description": "If set, search for pull requests into this branch.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxCommentLength",
            "description": "Not used.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of pull requests to retrieve.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitPullRequest"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/pullrequests/{pullRequestId}": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequests",
        "x-ms-vss-method": "GetPullRequestById",
        "description": "Retrieve a pull request.",
        "operationId": "Pull Requests_Get Pull Request By Id",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "The ID of the pull request to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/recycleBin/repositories": {
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "recycleBinRepositories",
        "x-ms-vss-method": "GetRecycleBinRepositories",
        "description": "Retrieve soft-deleted git repositories from the recycle bin.",
        "operationId": "Repositories_Get Recycle Bin Repositories",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitDeletedRepository"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/recycleBin/repositories/{repositoryId}": {
      "delete": {
        "tags": [
          "Repositories"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "recycleBinRepositories",
        "x-ms-vss-method": "DeleteRepositoryFromRecycleBin",
        "description": "Destroy (hard delete) a soft-deleted Git repository.",
        "operationId": "Repositories_Delete Repository From Recycle Bin",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The ID of the repository.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Repositories"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "recycleBinRepositories",
        "x-ms-vss-method": "RestoreRepositoryFromRecycleBin",
        "description": "Recover a soft-deleted Git repository. Recently deleted repositories go into a soft-delete state for a period of time before they are hard deleted and become unrecoverable.",
        "operationId": "Repositories_Restore Repository From Recycle Bin",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The ID of the repository.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitRecycleBinRepositoryDetails"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories": {
      "post": {
        "tags": [
          "Repositories"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "repositories",
        "x-ms-vss-method": "CreateRepository",
        "description": "Create a git repository in a team project.",
        "operationId": "Repositories_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sourceRef",
            "description": "[optional] Specify the source refs to use while creating a fork repo",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitRepositoryCreateOptions"
              }
            }
          },
          "description": "Specify the repo name, team project and/or parent repository. Team project information can be omitted from gitRepositoryToCreate if the request is project-scoped (i.e., includes project Id).",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "repositories",
        "x-ms-vss-method": "GetRepositories",
        "description": "Retrieve git repositories.",
        "operationId": "Repositories_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "[optional] True to include reference links. The default value is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "includeAllUrls",
            "description": "[optional] True to include all remote URLs. The default value is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "includeHidden",
            "description": "[optional] True to include hidden repositories. The default value is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitRepository"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}": {
      "delete": {
        "tags": [
          "Repositories"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "repositories",
        "x-ms-vss-method": "DeleteRepository",
        "description": "Delete a git repository",
        "operationId": "Repositories_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The ID of the repository.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Repositories"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "repositories",
        "x-ms-vss-method": "GetRepository",
        "description": "Retrieve a git repository.",
        "operationId": "Repositories_Get Repository",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Repositories"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "repositories",
        "x-ms-vss-method": "UpdateRepository",
        "description": "Updates the Git repository with either a new repo name or a new default branch.",
        "operationId": "Repositories_Update",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The ID of the repository.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitRepository"
              }
            }
          },
          "description": "Specify a new repo name or a new default branch of the repository",
          "required": true
        },
        "responses": {
          "200": {
            "description": "The operation succeeded. The response contains the updated repository information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRepository"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/annotatedtags": {
      "post": {
        "tags": [
          "Annotated Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "annotatedTags",
        "x-ms-vss-method": "CreateAnnotatedTag",
        "description": "Create an annotated tag.\n\nRepositories have both a name and an identifier. Identifiers are globally unique, but several projects\nmay contain a repository of the same name. You don't need to include the project if you specify a\nrepository by ID. However, if you specify a repository by name, you must also specify the project (by name or ID).",
        "operationId": "Annotated Tags_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID or name of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitAnnotatedTag"
              }
            }
          },
          "description": "Object containing details of tag to be created.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitAnnotatedTag"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/annotatedtags/{objectId}": {
      "get": {
        "tags": [
          "Annotated Tags"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "annotatedTags",
        "x-ms-vss-method": "GetAnnotatedTag",
        "description": "Get an annotated tag.\n\nRepositories have both a name and an identifier. Identifiers are globally unique, but several projects\nmay contain a repository of the same name. You don't need to include the project if you specify a\nrepository by ID. However, if you specify a repository by name, you must also specify the project (by name or ID).",
        "operationId": "Annotated Tags_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID or name of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "objectId",
            "description": "ObjectId (Sha1Id) of tag to get.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitAnnotatedTag"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/blobs": {
      "post": {
        "tags": [
          "Blobs"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "blobs",
        "x-ms-vss-method": "GetBlobs",
        "description": "Gets one or more blobs in a zip file download.",
        "operationId": "Blobs_Get Blobs Zip",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filename",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "description": "Blob IDs (SHA1 hashes) to be returned in the zip file.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "Stream"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/blobs/{sha1}": {
      "get": {
        "tags": [
          "Blobs"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "blobs",
        "x-ms-vss-method": "GetBlob",
        "description": "Get a single blob.\n\nRepositories have both a name and an identifier. Identifiers are globally unique,\nbut several projects may contain a repository of the same name. You don't need to include\nthe project if you specify a repository by ID. However, if you specify a repository by name,\nyou must also specify the project (by name or ID).",
        "operationId": "Blobs_Get Blob",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "sha1",
            "description": "SHA1 hash of the file. You can get the SHA1 of a file using the \"Git/Items/Get Item\" endpoint.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "download",
            "description": "If true, prompt for a download rather than rendering in a browser. Note: this value defaults to true if $format is zip",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "Provide a fileName to use for a download.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$format",
            "description": "Options: json, zip, text, octetstream. If not set, defaults to the MIME type set in the Accept header.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "resolveLfs",
            "description": "If true, try to resolve a blob to its LFS contents, if it's an LFS pointer file. Only compatible with octet-stream Accept headers or $format types",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/GitBlobRef"
                }
              },
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/GitBlobRef"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitBlobRef"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/cherryPicks": {
      "post": {
        "tags": [
          "Cherry Picks"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "cherryPicks",
        "x-ms-vss-method": "CreateCherryPick",
        "description": "Cherry pick a specific commit or commits that are associated to a pull request into a new branch.",
        "operationId": "Cherry Picks_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GitAsyncRefOperationParameters"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitCherryPick"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Cherry Picks"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "cherryPicks",
        "x-ms-vss-method": "GetCherryPickForRefName",
        "description": "Retrieve information about a cherry pick operation for a specific branch. This operation is expensive due to the underlying object structure, so this API only looks at the 1000 most recent cherry pick operations.",
        "operationId": "Cherry Picks_Get Cherry Pick For Ref Name",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "refName",
            "description": "The GitAsyncRefOperationParameters generatedRefName used for the cherry pick operation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitCherryPick"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/cherryPicks/{cherryPickId}": {
      "get": {
        "tags": [
          "Cherry Picks"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "cherryPicks",
        "x-ms-vss-method": "GetCherryPick",
        "description": "Retrieve information about a cherry pick operation by cherry pick Id.",
        "operationId": "Cherry Picks_Get Cherry Pick",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "cherryPickId",
            "description": "ID of the cherry pick.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitCherryPick"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/commits": {
      "get": {
        "tags": [
          "Commits"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "commits",
        "x-ms-vss-method": "GetPushCommits",
        "description": "Retrieve a list of commits associated with a particular push.",
        "operationId": "Commits_Get Push Commits",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pushId",
            "description": "The id of the push.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The maximum number of commits to return (\"get the top x commits\").",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of commits to skip.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "Set to false to avoid including REST Url links for resources. Defaults to true.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitCommitRef"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}": {
      "get": {
        "tags": [
          "Commits"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "commits",
        "x-ms-vss-method": "GetCommit",
        "description": "Retrieve a particular commit.",
        "operationId": "Commits_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "The id of the commit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "changeCount",
            "description": "The number of changes to include in the result.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitCommit"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/changes": {
      "get": {
        "tags": [
          "Commits"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "changes",
        "x-ms-vss-method": "GetChanges",
        "description": "Retrieve changes for a particular commit.",
        "operationId": "Commits_Get Changes",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "The id of the commit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The id or friendly name of the repository. To use the friendly name, projectId must also be specified.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "The maximum number of changes to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "The number of changes to skip.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitCommitChanges"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/commits/{commitId}/statuses": {
      "post": {
        "tags": [
          "Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "statuses",
        "x-ms-vss-method": "CreateCommitStatus",
        "description": "Create Git commit status.",
        "operationId": "Statuses_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "ID of the Git commit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitStatus"
              }
            }
          },
          "description": "Git commit status object to create.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.code_status"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "statuses",
        "x-ms-vss-method": "GetStatuses",
        "description": "Get statuses associated with the Git commit.",
        "operationId": "Statuses_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "ID of the Git commit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "Optional. The number of statuses to retrieve. Default is 1000.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Optional. The number of statuses to ignore. Default is 0. For example, to retrieve results 101-150, set top to 50 and skip to 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "latestOnly",
            "description": "The flag indicates whether to get only latest statuses grouped by `Context.Name` and `Context.Genre`.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitStatus"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.code_status"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/commitsbatch": {
      "post": {
        "tags": [
          "Commits"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "commitsBatch",
        "x-ms-vss-method": "GetCommitsBatch",
        "description": "Retrieve git commits for a project matching the search criteria",
        "operationId": "Commits_Get Commits Batch",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "Number of commits to skip. The value cannot exceed 3,000,000.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Maximum number of commits to return. The value cannot exceed 50,000.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "includeStatuses",
            "description": "True to include additional commit status information.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitQueryCommitsCriteria"
              }
            }
          },
          "description": "Search options",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitCommitRef"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/diffs/commits": {
      "get": {
        "tags": [
          "Diffs"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "commitDiffs",
        "x-ms-vss-method": "GetCommitDiffs",
        "description": "Find the closest common commit (the merge base) between base and target commits, and get the diff between either the base and target commits or common and target commits.",
        "operationId": "Diffs_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "diffCommonCommit",
            "description": "If true, diff between common and target commits. If false, diff between base and target commits.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Maximum number of changes to return. Defaults to 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "Number of changes to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "baseVersion",
            "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "baseVersionOptions",
            "description": "Version options - Specify additional modifiers to version (e.g Previous)",
            "required": false,
            "x-ms-enum": {
              "name": "GitVersionOptions",
              "values": [
                {
                  "value": "none",
                  "description": "Not specified"
                },
                {
                  "value": "previousChange",
                  "description": "Commit that changed item prior to the current version"
                },
                {
                  "value": "firstParent",
                  "description": "First parent of commit (HEAD^)"
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "previousChange",
                "firstParent"
              ]
            }
          },
          {
            "in": "query",
            "name": "baseVersionType",
            "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
            "required": false,
            "x-ms-enum": {
              "name": "GitVersionType",
              "values": [
                {
                  "value": "branch",
                  "description": "Interpret the version as a branch name"
                },
                {
                  "value": "tag",
                  "description": "Interpret the version as a tag name"
                },
                {
                  "value": "commit",
                  "description": "Interpret the version as a commit ID (SHA1)"
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "branch",
                "tag",
                "commit"
              ]
            }
          },
          {
            "in": "query",
            "name": "targetVersion",
            "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "targetVersionOptions",
            "description": "Version options - Specify additional modifiers to version (e.g Previous)",
            "required": false,
            "x-ms-enum": {
              "name": "GitVersionOptions",
              "values": [
                {
                  "value": "none",
                  "description": "Not specified"
                },
                {
                  "value": "previousChange",
                  "description": "Commit that changed item prior to the current version"
                },
                {
                  "value": "firstParent",
                  "description": "First parent of commit (HEAD^)"
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "previousChange",
                "firstParent"
              ]
            }
          },
          {
            "in": "query",
            "name": "targetVersionType",
            "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
            "required": false,
            "x-ms-enum": {
              "name": "GitVersionType",
              "values": [
                {
                  "value": "branch",
                  "description": "Interpret the version as a branch name"
                },
                {
                  "value": "tag",
                  "description": "Interpret the version as a tag name"
                },
                {
                  "value": "commit",
                  "description": "Interpret the version as a commit ID (SHA1)"
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "branch",
                "tag",
                "commit"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitCommitDiffs"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/importRequests": {
      "post": {
        "tags": [
          "Import Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "importRequests",
        "x-ms-vss-method": "CreateImportRequest",
        "description": "Create an import request.",
        "operationId": "Import Requests_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitImportRequest"
              }
            }
          },
          "description": "The import request to create.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitImportRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Import Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "importRequests",
        "x-ms-vss-method": "QueryImportRequests",
        "description": "Retrieve import requests for a repository.",
        "operationId": "Import Requests_Query",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeAbandoned",
            "description": "True to include abandoned import requests in the results.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitImportRequest"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/importRequests/{importRequestId}": {
      "get": {
        "tags": [
          "Import Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "importRequests",
        "x-ms-vss-method": "GetImportRequest",
        "description": "Retrieve a particular import request.",
        "operationId": "Import Requests_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "importRequestId",
            "description": "The unique identifier for the import request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitImportRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Import Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "importRequests",
        "x-ms-vss-method": "UpdateImportRequest",
        "description": "Retry or abandon a failed import request.\n\nThere can only be one active import request associated with a repository. Marking a failed import request abandoned makes it inactive.",
        "operationId": "Import Requests_Update",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "importRequestId",
            "description": "The unique identifier for the import request to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitImportRequest"
              }
            }
          },
          "description": "The updated version of the import request. Currently, the only change allowed is setting the Status to Queued or Abandoned.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitImportRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/items": {
      "get": {
        "tags": [
          "Items"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "items",
        "x-ms-vss-method": "GetItems",
        "description": "Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.",
        "operationId": "Items_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scopePath",
            "description": "The path scope.  The default is null.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "recursionLevel",
            "description": "The recursion level of this request. The default is 'none', no recursion.",
            "required": false,
            "x-ms-enum": {
              "name": "VersionControlRecursionType",
              "values": [
                {
                  "value": "none",
                  "description": "Only return the specified item."
                },
                {
                  "value": "oneLevel",
                  "description": "Return the specified item and its direct children."
                },
                {
                  "value": "oneLevelPlusNestedEmptyFolders",
                  "description": "Return the specified item and its direct children, as well as recursive chains of nested child folders that only contain a single folder."
                },
                {
                  "value": "full",
                  "description": "Return specified item and all descendants"
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "oneLevel",
                "oneLevelPlusNestedEmptyFolders",
                "full"
              ]
            }
          },
          {
            "in": "query",
            "name": "includeContentMetadata",
            "description": "Set to true to include content metadata.  Default is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "latestProcessedChange",
            "description": "Set to true to include the latest changes.  Default is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "download",
            "description": "Set to true to download the response as a file.  Default is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "Set to true to include links to items.  Default is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "$format",
            "description": "If specified, this overrides the HTTP Accept request header to return either 'json' or 'zip'. If $format is specified, then api-version should also be specified as a query parameter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "versionDescriptor.version",
            "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "versionDescriptor.versionOptions",
            "description": "Version options - Specify additional modifiers to version (e.g Previous)",
            "required": false,
            "x-ms-enum": {
              "name": "GitVersionOptions",
              "values": [
                {
                  "value": "none",
                  "description": "Not specified"
                },
                {
                  "value": "previousChange",
                  "description": "Commit that changed item prior to the current version"
                },
                {
                  "value": "firstParent",
                  "description": "First parent of commit (HEAD^)"
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "previousChange",
                "firstParent"
              ]
            }
          },
          {
            "in": "query",
            "name": "versionDescriptor.versionType",
            "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
            "required": false,
            "x-ms-enum": {
              "name": "GitVersionType",
              "values": [
                {
                  "value": "branch",
                  "description": "Interpret the version as a branch name"
                },
                {
                  "value": "tag",
                  "description": "Interpret the version as a tag name"
                },
                {
                  "value": "commit",
                  "description": "Interpret the version as a commit ID (SHA1)"
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "branch",
                "tag",
                "commit"
              ]
            }
          },
          {
            "in": "query",
            "name": "zipForUnix",
            "description": "Set to true to keep the file permissions for unix (and POSIX) systems like executables and symlinks",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitItem"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/itemsbatch": {
      "post": {
        "tags": [
          "Items"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "itemsBatch",
        "x-ms-vss-method": "GetItemsBatch",
        "description": "Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path",
        "operationId": "Items_Get Items Batch",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitItemRequestData"
              }
            }
          },
          "description": "Request data attributes: ItemDescriptors, IncludeContentMetadata, LatestProcessedChange, IncludeLinks. ItemDescriptors: Collection of items to fetch, including path, version, and recursion level. IncludeContentMetadata: Whether to include metadata for all items LatestProcessedChange: Whether to include shallow ref to commit that last changed each item. IncludeLinks: Whether to include the _links field on the shallow references.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {}
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullrequestquery": {
      "post": {
        "tags": [
          "Pull Request Query"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestQuery",
        "x-ms-vss-method": "GetPullRequestQuery",
        "description": "This API is used to find what pull requests are related to a given commit.  It can be used to either find the pull request that created a particular merge commit or it can be used to find all pull requests that have ever merged a particular commit.  The input is a list of queries which each contain a list of commits. For each commit that you search against, you will get back a dictionary of commit -> pull requests.",
        "operationId": "Pull Request Query_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitPullRequestQuery"
              }
            }
          },
          "description": "The list of queries to perform.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequestQuery"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullrequests": {
      "post": {
        "tags": [
          "Pull Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequests",
        "x-ms-vss-method": "CreatePullRequest",
        "description": "Create a pull request.",
        "operationId": "Pull Requests_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "supportsIterations",
            "description": "If true, subsequent pushes to the pull request will be individually reviewable. Set this to false for large pull requests for performance reasons if this functionality is not needed.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitPullRequest"
              }
            }
          },
          "description": "The pull request to create.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequests",
        "x-ms-vss-method": "GetPullRequests",
        "description": "Retrieve all pull requests matching a specified criteria.\n\nPlease note that description field will be truncated up to 400 symbols in the result.",
        "operationId": "Pull Requests_Get Pull Requests",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.creatorId",
            "description": "If set, search for pull requests that were created by this identity.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.includeLinks",
            "description": "Whether to include the _links field on the shallow references",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.maxTime",
            "description": "If specified, filters pull requests that created/closed before this date based on the queryTimeRangeType specified.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.minTime",
            "description": "If specified, filters pull requests that created/closed after this date based on the queryTimeRangeType specified.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.queryTimeRangeType",
            "description": "The type of time range which should be used for minTime and maxTime. Defaults to Created if unset.",
            "required": false,
            "x-ms-enum": {
              "name": "PullRequestTimeRangeType",
              "values": [
                {
                  "value": "created",
                  "description": "The date when the pull request was created."
                },
                {
                  "value": "closed",
                  "description": "The date when the pull request was closed (completed, abandoned, or merged externally)."
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "created",
                "closed"
              ]
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.repositoryId",
            "description": "If set, search for pull requests whose target branch is in this repository.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.reviewerId",
            "description": "If set, search for pull requests that have this identity as a reviewer.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.sourceRefName",
            "description": "If set, search for pull requests from this branch.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.sourceRepositoryId",
            "description": "If set, search for pull requests whose source branch is in this repository.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.status",
            "description": "If set, search for pull requests that are in this state. Defaults to Active if unset.",
            "required": false,
            "x-ms-enum": {
              "name": "PullRequestStatus",
              "values": [
                {
                  "value": "notSet",
                  "description": "Status not set. Default state."
                },
                {
                  "value": "active",
                  "description": "Pull request is active."
                },
                {
                  "value": "abandoned",
                  "description": "Pull request is abandoned."
                },
                {
                  "value": "completed",
                  "description": "Pull request is completed."
                },
                {
                  "value": "all",
                  "description": "Used in pull request search criteria to include all statuses."
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "notSet",
                "active",
                "abandoned",
                "completed",
                "all"
              ]
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.targetRefName",
            "description": "If set, search for pull requests into this branch.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxCommentLength",
            "description": "Not used.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "The number of pull requests to ignore. For example, to retrieve results 101-150, set top to 50 and skip to 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "The number of pull requests to retrieve.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitPullRequest"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullrequests/{pullRequestId}": {
      "get": {
        "tags": [
          "Pull Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequests",
        "x-ms-vss-method": "GetPullRequest",
        "description": "Retrieve a pull request.",
        "operationId": "Pull Requests_Get Pull Request",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "The ID of the pull request to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "maxCommentLength",
            "description": "Not used.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "Not used.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Not used.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "includeCommits",
            "description": "If true, the pull request will be returned with the associated commits.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "includeWorkItemRefs",
            "description": "If true, the pull request will be returned with the associated work item references.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Pull Requests"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequests",
        "x-ms-vss-method": "UpdatePullRequest",
        "description": "Update a pull request\n\nThese are the properties that can be updated with the API:\n - Status\n - Title\n - Description (up to 4000 characters)\n - CompletionOptions\n - MergeOptions\n - AutoCompleteSetBy.Id\n - TargetRefName (when the PR retargeting feature is enabled)\n Attempting to update other properties outside of this list will either cause the server to throw an `InvalidArgumentValueException`,\n or to silently ignore the update.",
        "operationId": "Pull Requests_Update",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitPullRequest"
              }
            }
          },
          "description": "The pull request content that should be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments": {
      "get": {
        "tags": [
          "Pull Request Attachments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestAttachments",
        "x-ms-vss-method": "GetAttachments",
        "description": "Get a list of files attached to a given pull request.",
        "operationId": "Pull Request Attachments_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attachment"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/attachments/{fileName}": {
      "post": {
        "tags": [
          "Pull Request Attachments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestAttachments",
        "x-ms-vss-method": "CreateAttachment",
        "description": "Attach a new file to a pull request.",
        "operationId": "Pull Request Attachments_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "fileName",
            "description": "The name of the file.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "Stream"
              }
            }
          },
          "description": "Stream to upload",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          },
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attachment"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Pull Request Attachments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestAttachments",
        "x-ms-vss-method": "DeleteAttachment",
        "description": "Delete a pull request attachment.",
        "operationId": "Pull Request Attachments_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "fileName",
            "description": "The name of the attachment to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Attachments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestAttachments",
        "x-ms-vss-method": "GetAttachment",
        "description": "Get the file content of a pull request attachment.",
        "operationId": "Pull Request Attachments_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "fileName",
            "description": "The name of the attachment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "Stream"
                }
              },
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "Stream"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/commits": {
      "get": {
        "tags": [
          "Pull Request Commits"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestCommits",
        "x-ms-vss-method": "GetPullRequestCommits",
        "description": "Get the commits for the specified pull request.",
        "operationId": "Pull Request Commits_Get Pull Request Commits",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID or name of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Maximum number of commits to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "The continuation token used for pagination.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitCommitRef"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations": {
      "get": {
        "tags": [
          "Pull Request Iterations"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestIterations",
        "x-ms-vss-method": "GetPullRequestIterations",
        "description": "Get the list of iterations for the specified pull request.",
        "operationId": "Pull Request Iterations_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID or name of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeCommits",
            "description": "If true, include the commits associated with each iteration in the response.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitPullRequestIteration"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}": {
      "get": {
        "tags": [
          "Pull Request Iterations"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestIterations",
        "x-ms-vss-method": "GetPullRequestIteration",
        "description": "Get the specified iteration for a pull request.",
        "operationId": "Pull Request Iterations_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID or name of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "ID of the pull request iteration to return.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequestIteration"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/changes": {
      "get": {
        "tags": [
          "Pull Request Iteration Changes"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestIterationChanges",
        "x-ms-vss-method": "GetPullRequestIterationChanges",
        "description": "Retrieve the changes made in a pull request between two iterations.",
        "operationId": "Pull Request Iteration Changes_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "ID of the pull request iteration. <br /> Iteration one is the head of the source branch at the time the pull request is created and subsequent iterations are created when there are pushes to the source branch. Allowed values are between 1 and the maximum iteration on this pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Optional. The number of changes to retrieve.  The default value is 100 and the maximum value is 2000.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "Optional. The number of changes to ignore.  For example, to retrieve changes 101-150, set top 50 and skip to 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$compareTo",
            "description": "ID of the pull request iteration to compare against.  The default value is zero which indicates the comparison is made against the common commit between the source and target branches",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequestIterationChanges"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/commits": {
      "get": {
        "tags": [
          "Pull Request Commits"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestCommits",
        "x-ms-vss-method": "GetPullRequestIterationCommits",
        "description": "Get the commits for the specified iteration of a pull request.",
        "operationId": "Pull Request Commits_Get Pull Request Iteration Commits",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID or name of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "ID of the iteration from which to get the commits.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "top",
            "description": "Maximum number of commits to return. The maximum number of commits that can be returned per batch is 500.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "skip",
            "description": "Number of commits to skip.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitCommitRef"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses": {
      "post": {
        "tags": [
          "Pull Request Iteration Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestIterationStatuses",
        "x-ms-vss-method": "CreatePullRequestIterationStatus",
        "description": "Create a pull request status on the iteration. This operation will have the same result as Create status on pull request with specified iteration ID in the request body.\n\nThe only required field for the status is `Context.Name` that uniquely identifies the status.\nNote that `iterationId` in the request body is optional since `iterationId` can be specified in the URL.\nA conflict between `iterationId` in the URL and `iterationId` in the request body will result in status code 400.",
        "operationId": "Pull Request Iteration Statuses_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "ID of the pull request iteration.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GitPullRequestStatus"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequestStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.code_status"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Iteration Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestIterationStatuses",
        "x-ms-vss-method": "GetPullRequestIterationStatuses",
        "description": "Get all the statuses associated with a pull request iteration.",
        "operationId": "Pull Request Iteration Statuses_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "ID of the pull request iteration.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitPullRequestStatus"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.code_status"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Pull Request Iteration Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestIterationStatuses",
        "x-ms-vss-method": "UpdatePullRequestIterationStatuses",
        "description": "Update pull request iteration statuses collection. The only supported operation type is `remove`.\n\nThis operation allows to delete multiple statuses in one call.\nThe path of the `remove` operation should refer to the ID of the pull request status.\nFor example `path=\"/1\"` refers to the pull request status with ID 1.",
        "operationId": "Pull Request Iteration Statuses_Update",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "ID of the pull request iteration.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/JsonPatchDocument"
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.code_status"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/iterations/{iterationId}/statuses/{statusId}": {
      "delete": {
        "tags": [
          "Pull Request Iteration Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestIterationStatuses",
        "x-ms-vss-method": "DeletePullRequestIterationStatus",
        "description": "Delete pull request iteration status.\n\nYou can remove multiple statuses in one call by using Update operation.",
        "operationId": "Pull Request Iteration Statuses_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "ID of the pull request iteration.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "ID of the pull request status.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.code_status"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Iteration Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestIterationStatuses",
        "x-ms-vss-method": "GetPullRequestIterationStatus",
        "description": "Get the specific pull request iteration status by ID. The status ID is unique within the pull request across all iterations.",
        "operationId": "Pull Request Iteration Statuses_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "iterationId",
            "description": "ID of the pull request iteration.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "ID of the pull request status.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequestStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.code_status"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels": {
      "post": {
        "tags": [
          "Pull Request Labels"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestLabels",
        "x-ms-vss-method": "CreatePullRequestLabel",
        "description": "Create a tag (if that does not exists yet) and add that as a label (tag) for a specified pull request. The only required field is the name of the new label (tag).",
        "operationId": "Pull Request Labels_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "Project ID or project name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebApiCreateTagRequestData"
              }
            }
          },
          "description": "Label to assign to the pull request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiTagDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Labels"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestLabels",
        "x-ms-vss-method": "GetPullRequestLabels",
        "description": "Get all the labels (tags) assigned to a pull request.",
        "operationId": "Pull Request Labels_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "Project ID or project name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebApiTagDefinition"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/labels/{labelIdOrName}": {
      "delete": {
        "tags": [
          "Pull Request Labels"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestLabels",
        "x-ms-vss-method": "DeletePullRequestLabels",
        "description": "Removes a label (tag) from the set of those assigned to the pull request. The tag itself will not be deleted.",
        "operationId": "Pull Request Labels_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "labelIdOrName",
            "description": "The name or ID of the label requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "Project ID or project name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Labels"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestLabels",
        "x-ms-vss-method": "GetPullRequestLabel",
        "description": "Retrieves a single label (tag) that has been assigned to a pull request.",
        "operationId": "Pull Request Labels_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "labelIdOrName",
            "description": "The name or ID of the label requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "Project ID or project name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebApiTagDefinition"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/properties": {
      "get": {
        "tags": [
          "Pull Request Properties"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestProperties",
        "x-ms-vss-method": "GetPullRequestProperties",
        "description": "Get external properties of the pull request.",
        "operationId": "Pull Request Properties_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertiesCollection"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Pull Request Properties"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestProperties",
        "x-ms-vss-method": "UpdatePullRequestProperties",
        "description": "Create or update pull request external properties. The patch operation can be `add`, `replace` or `remove`. For `add` operation, the path can be empty. If the path is empty, the value must be a list of key value pairs. For `replace` operation, the path cannot be empty. If the path does not exist, the property will be added to the collection. For `remove` operation, the path cannot be empty. If the path does not exist, no action will be performed.",
        "operationId": "Pull Request Properties_Update",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/JsonPatchDocument"
              }
            }
          },
          "description": "Properties to add, replace or remove in JSON Patch format.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertiesCollection"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers": {
      "post": {
        "tags": [
          "Pull Request Reviewers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestReviewers",
        "x-ms-vss-method": "CreatePullRequestReviewers",
        "description": "Add reviewers to a pull request.",
        "operationId": "Pull Request Reviewers_Create Pull Request Reviewers",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityRef"
                }
              }
            }
          },
          "description": "Reviewers to add to the pull request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityRefWithVote"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Pull Request Reviewers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestReviewers",
        "x-ms-vss-method": "CreateUnmaterializedPullRequestReviewer",
        "description": "Add an unmaterialized identity to the reviewers of a pull request.",
        "operationId": "Pull Request Reviewers_Create Unmaterialized Pull Request Reviewer",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityRefWithVote"
              }
            }
          },
          "description": "Reviewer to add to the pull request.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityRefWithVote"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Reviewers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestReviewers",
        "x-ms-vss-method": "GetPullRequestReviewers",
        "description": "Retrieve the reviewers for a pull request",
        "operationId": "Pull Request Reviewers_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityRefWithVote"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Pull Request Reviewers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestReviewers",
        "x-ms-vss-method": "UpdatePullRequestReviewers",
        "description": "Reset the votes of multiple reviewers on a pull request.  NOTE: This endpoint only supports updating votes, but does not support updating required reviewers (use policy) or display names.",
        "operationId": "Pull Request Reviewers_Update Pull Request Reviewers",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdentityRefWithVote"
                }
              }
            }
          },
          "description": "IDs of the reviewers whose votes will be reset to zero",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/reviewers/{reviewerId}": {
      "put": {
        "tags": [
          "Pull Request Reviewers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestReviewers",
        "x-ms-vss-method": "CreatePullRequestReviewer",
        "description": "Add a reviewer to a pull request or cast a vote.",
        "operationId": "Pull Request Reviewers_Create Pull Request Reviewer",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "ID of the reviewer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityRefWithVote"
              }
            }
          },
          "description": "Reviewer's vote.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.<br />Reviewers can set their own vote with this method.  When adding other reviewers, vote must be set to zero.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityRefWithVote"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Pull Request Reviewers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestReviewers",
        "x-ms-vss-method": "DeletePullRequestReviewer",
        "description": "Remove a reviewer from a pull request.",
        "operationId": "Pull Request Reviewers_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "ID of the reviewer to remove.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Reviewers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestReviewers",
        "x-ms-vss-method": "GetPullRequestReviewer",
        "description": "Retrieve information about a particular reviewer on a pull request",
        "operationId": "Pull Request Reviewers_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "ID of the reviewer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityRefWithVote"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Pull Request Reviewers"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestReviewers",
        "x-ms-vss-method": "UpdatePullRequestReviewer",
        "description": "Edit a reviewer entry. These fields are patchable: isFlagged, hasDeclined",
        "operationId": "Pull Request Reviewers_Update Pull Request Reviewer",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "reviewerId",
            "description": "ID of the reviewer.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityRefWithVote"
              }
            }
          },
          "description": "Reviewer data.<br />If the reviewer's ID is included here, it must match the reviewerID parameter.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityRefWithVote"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/share": {
      "post": {
        "tags": [
          "Pull Request Share"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestShare",
        "x-ms-vss-method": "SharePullRequest",
        "description": "Sends an e-mail notification about a specific pull request to a set of recipients",
        "operationId": "Pull Request Share_Share Pull Request",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the git repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShareNotificationContext"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses": {
      "post": {
        "tags": [
          "Pull Request Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestStatuses",
        "x-ms-vss-method": "CreatePullRequestStatus",
        "description": "Create a pull request status.\n\nThe only required field for the status is `Context.Name` that uniquely identifies the status.\nNote that you can specify iterationId in the request body to post the status on the iteration.",
        "operationId": "Pull Request Statuses_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GitPullRequestStatus"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequestStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.code_status"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestStatuses",
        "x-ms-vss-method": "GetPullRequestStatuses",
        "description": "Get all the statuses associated with a pull request.",
        "operationId": "Pull Request Statuses_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitPullRequestStatus"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.code_status"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Pull Request Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestStatuses",
        "x-ms-vss-method": "UpdatePullRequestStatuses",
        "description": "Update pull request statuses collection. The only supported operation type is `remove`.\n\nThis operation allows to delete multiple statuses in one call.\nThe path of the `remove` operation should refer to the ID of the pull request status.\nFor example `path=\"/1\"` refers to the pull request status with ID 1.",
        "operationId": "Pull Request Statuses_Update",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/JsonPatchDocument"
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.code_status"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/statuses/{statusId}": {
      "delete": {
        "tags": [
          "Pull Request Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestStatuses",
        "x-ms-vss-method": "DeletePullRequestStatus",
        "description": "Delete pull request status.\n\nYou can remove multiple statuses in one call by using Update operation.",
        "operationId": "Pull Request Statuses_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "ID of the pull request status.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.code_status"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Statuses"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestStatuses",
        "x-ms-vss-method": "GetPullRequestStatus",
        "description": "Get the specific pull request status by ID. The status ID is unique within the pull request across all iterations.",
        "operationId": "Pull Request Statuses_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request’s target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "statusId",
            "description": "ID of the pull request status.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequestStatus"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.code_status"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads": {
      "post": {
        "tags": [
          "Pull Request Threads"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestThreads",
        "x-ms-vss-method": "CreateThread",
        "description": "Create a thread in a pull request.",
        "operationId": "Pull Request Threads_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "Repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitPullRequestCommentThread"
              }
            }
          },
          "description": "The thread to create. Thread must contain at least one comment.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequestCommentThread"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.threads_full"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Threads"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestThreads",
        "x-ms-vss-method": "GetThreads",
        "description": "Retrieve all threads in a pull request.",
        "operationId": "Pull Request Threads_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$iteration",
            "description": "If specified, thread positions will be tracked using this iteration as the right side of the diff.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$baseIteration",
            "description": "If specified, thread positions will be tracked using this iteration as the left side of the diff.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitPullRequestCommentThread"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.threads_full"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}": {
      "get": {
        "tags": [
          "Pull Request Threads"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestThreads",
        "x-ms-vss-method": "GetPullRequestThread",
        "description": "Retrieve a thread in a pull request.",
        "operationId": "Pull Request Threads_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "ID of the thread.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$iteration",
            "description": "If specified, thread position will be tracked using this iteration as the right side of the diff.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$baseIteration",
            "description": "If specified, thread position will be tracked using this iteration as the left side of the diff.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequestCommentThread"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.threads_full"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Pull Request Threads"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestThreads",
        "x-ms-vss-method": "UpdateThread",
        "description": "Update a thread in a pull request.",
        "operationId": "Pull Request Threads_Update",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "ID of the thread to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitPullRequestCommentThread"
              }
            }
          },
          "description": "The thread content that should be updated.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPullRequestCommentThread"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.threads_full"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments": {
      "post": {
        "tags": [
          "Pull Request Thread Comments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestThreadComments",
        "x-ms-vss-method": "CreateComment",
        "description": "Create a comment on a specific thread in a pull request (up to 500 comments can be created per thread).",
        "operationId": "Pull Request Thread Comments_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "ID of the thread that the desired comment is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          },
          "description": "The comment to create. Comments can be up to 150,000 characters.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.threads_full"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Thread Comments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestThreadComments",
        "x-ms-vss-method": "GetComments",
        "description": "Retrieve all comments associated with a specific thread in a pull request.",
        "operationId": "Pull Request Thread Comments_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "ID of the thread.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Comment"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.threads_full"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}": {
      "delete": {
        "tags": [
          "Pull Request Thread Comments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestThreadComments",
        "x-ms-vss-method": "DeleteComment",
        "description": "Delete a comment associated with a specific thread in a pull request.",
        "operationId": "Pull Request Thread Comments_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "ID of the thread that the desired comment is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "ID of the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.threads_full"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Thread Comments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestThreadComments",
        "x-ms-vss-method": "GetComment",
        "description": "Retrieve a comment associated with a specific thread in a pull request.",
        "operationId": "Pull Request Thread Comments_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "ID of the thread that the desired comment is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "ID of the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.threads_full"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Pull Request Thread Comments"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestThreadComments",
        "x-ms-vss-method": "UpdateComment",
        "description": "Update a comment associated with a specific thread in a pull request.",
        "operationId": "Pull Request Thread Comments_Update",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "ID of the thread that the desired comment is in.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "ID of the comment to update.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          },
          "description": "The comment content that should be updated. Comments can be up to 150,000 characters.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.threads_full"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/threads/{threadId}/comments/{commentId}/likes": {
      "post": {
        "tags": [
          "Pull Request Comment Likes"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestCommentLikes",
        "x-ms-vss-method": "CreateLike",
        "description": "Add a like on a comment.",
        "operationId": "Pull Request Comment Likes_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "The ID of the thread that contains the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "The ID of the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.threads_full"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Pull Request Comment Likes"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestCommentLikes",
        "x-ms-vss-method": "DeleteLike",
        "description": "Delete a like on a comment.",
        "operationId": "Pull Request Comment Likes_Delete",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "The ID of the thread that contains the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "The ID of the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write",
              "vso.threads_full"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pull Request Comment Likes"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestCommentLikes",
        "x-ms-vss-method": "GetLikes",
        "description": "Get likes for a comment.",
        "operationId": "Pull Request Comment Likes_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The repository ID of the pull request's target branch.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "threadId",
            "description": "The ID of the thread that contains the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "commentId",
            "description": "The ID of the comment.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdentityRef"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code",
              "vso.threads_full"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pullRequests/{pullRequestId}/workitems": {
      "get": {
        "tags": [
          "Pull Request Work Items"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pullRequestWorkItems",
        "x-ms-vss-method": "GetPullRequestWorkItemRefs",
        "description": "Retrieve a list of work items associated with a pull request.",
        "operationId": "Pull Request Work Items_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID or name of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pullRequestId",
            "description": "ID of the pull request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ResourceRef"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pushes": {
      "post": {
        "tags": [
          "Pushes"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pushes",
        "x-ms-vss-method": "CreatePush",
        "description": "Push changes to the repository.",
        "operationId": "Pushes_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitPush"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPush"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Pushes"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pushes",
        "x-ms-vss-method": "GetPushes",
        "description": "Retrieves pushes associated with the specified repository.",
        "operationId": "Pushes_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$skip",
            "description": "Number of pushes to skip.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "Number of pushes to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.fromDate",
            "description": "Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.includeLinks",
            "description": "Whether to include the _links field on the shallow references",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.includeRefUpdates",
            "description": "Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.pusherId",
            "description": "Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.refName",
            "description": "Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "searchCriteria.toDate",
            "description": "Search criteria attributes: fromDate, toDate, pusherId, refName, includeRefUpdates or includeLinks. fromDate: Start date to search from. toDate: End date to search to. pusherId: Identity of the person who submitted the push. refName: Branch name to consider. includeRefUpdates: If true, include the list of refs that were updated by the push. includeLinks: Whether to include the _links field on the shallow references.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitPush"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/pushes/{pushId}": {
      "get": {
        "tags": [
          "Pushes"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "pushes",
        "x-ms-vss-method": "GetPush",
        "description": "Retrieves a particular push.",
        "operationId": "Pushes_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "pushId",
            "description": "ID of the push.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeCommits",
            "description": "The number of commits to include in the result.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "includeRefUpdates",
            "description": "If true, include the list of refs that were updated by the push.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitPush"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/refs": {
      "get": {
        "tags": [
          "Refs"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "refs",
        "x-ms-vss-method": "GetRefs",
        "description": "Queries the provided repository for its refs and returns them.",
        "operationId": "Refs_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "[optional] A filter to apply to the refs (starts with).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "[optional] Specifies if referenceLinks should be included in the result. default is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "includeStatuses",
            "description": "[optional] Includes up to the first 1000 commit statuses for each ref. The default value is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "includeMyBranches",
            "description": "[optional] Includes only branches that the user owns, the branches the user favorites, and the default branch. The default value is false. Cannot be combined with the filter parameter.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "latestStatusesOnly",
            "description": "[optional] True to include only the tip commit status for each ref. This option requires `includeStatuses` to be true. The default value is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "peelTags",
            "description": "[optional] Annotated tags will populate the PeeledObjectId property. default is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "filterContains",
            "description": "[optional] A filter to apply to the refs (contains).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$top",
            "description": "[optional] Maximum number of refs to return. It cannot be bigger than 1000. If it is not provided but continuationToken is, top will default to 100.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "continuationToken",
            "description": "The continuation token used for pagination.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitRef"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Refs"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "refs",
        "x-ms-vss-method": "UpdateRef",
        "description": "Lock or Unlock a branch.",
        "operationId": "Refs_Update Ref",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "The name of the branch to lock/unlock",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "ID or name of the team project. Optional if specifying an ID for repository.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitRefUpdate"
              }
            }
          },
          "description": "The ref update action (lock/unlock) to perform",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRef"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Refs"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "refs",
        "x-ms-vss-method": "UpdateRefs",
        "description": "Creating, updating, or deleting refs(branches).\n\nUpdating a ref means making it point at a different commit than it used to. You must specify both the old and new commit to avoid race conditions.",
        "operationId": "Refs_Update Refs",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "ID or name of the team project. Optional if specifying an ID for repository.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GitRefUpdate"
                }
              }
            }
          },
          "description": "List of ref updates to attempt to perform",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitRefUpdateResult"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/reverts": {
      "post": {
        "tags": [
          "Reverts"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "reverts",
        "x-ms-vss-method": "CreateRevert",
        "description": "Starts the operation to create a new branch which reverts changes introduced by either a specific commit or commits that are associated to a pull request.",
        "operationId": "Reverts_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/GitAsyncRefOperationParameters"
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRevert"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Reverts"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "reverts",
        "x-ms-vss-method": "GetRevertForRefName",
        "description": "Retrieve information about a revert operation for a specific branch.",
        "operationId": "Reverts_Get Revert For Ref Name",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "refName",
            "description": "The GitAsyncRefOperationParameters generatedRefName used for the revert operation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRevert"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/reverts/{revertId}": {
      "get": {
        "tags": [
          "Reverts"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "reverts",
        "x-ms-vss-method": "GetRevert",
        "description": "Retrieve information about a revert operation by revert Id.",
        "operationId": "Reverts_Get Revert",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "revertId",
            "description": "ID of the revert operation.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitRevert"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/stats/branches": {
      "get": {
        "tags": [
          "Stats"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "branchStats",
        "x-ms-vss-method": "GetBranches",
        "description": "Retrieve statistics about all branches within a repository.",
        "operationId": "Stats_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "baseVersionDescriptor.version",
            "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "baseVersionDescriptor.versionOptions",
            "description": "Version options - Specify additional modifiers to version (e.g Previous)",
            "required": false,
            "x-ms-enum": {
              "name": "GitVersionOptions",
              "values": [
                {
                  "value": "none",
                  "description": "Not specified"
                },
                {
                  "value": "previousChange",
                  "description": "Commit that changed item prior to the current version"
                },
                {
                  "value": "firstParent",
                  "description": "First parent of commit (HEAD^)"
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "none",
                "previousChange",
                "firstParent"
              ]
            }
          },
          {
            "in": "query",
            "name": "baseVersionDescriptor.versionType",
            "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
            "required": false,
            "x-ms-enum": {
              "name": "GitVersionType",
              "values": [
                {
                  "value": "branch",
                  "description": "Interpret the version as a branch name"
                },
                {
                  "value": "tag",
                  "description": "Interpret the version as a tag name"
                },
                {
                  "value": "commit",
                  "description": "Interpret the version as a commit ID (SHA1)"
                }
              ]
            },
            "schema": {
              "type": "string",
              "enum": [
                "branch",
                "tag",
                "commit"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitBranchStats"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/suggestions": {
      "get": {
        "tags": [
          "Suggestions"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "suggestions",
        "x-ms-vss-method": "GetSuggestions",
        "description": "Retrieve a pull request suggestion for a particular repository or team project.",
        "operationId": "Suggestions_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "ID of the git repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitSuggestion"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryId}/trees/{sha1}": {
      "get": {
        "tags": [
          "Trees"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "trees",
        "x-ms-vss-method": "GetTree",
        "description": "The Tree endpoint returns the collection of objects underneath the specified tree. Trees are folders in a Git repository.\n\nRepositories have both a name and an identifier. Identifiers are globally unique, but several projects may contain a repository of the same name. You don't need to include the project if you specify a repository by ID. However, if you specify a repository by name, you must also specify the project (by name or ID.",
        "operationId": "Trees_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryId",
            "description": "Repository Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "sha1",
            "description": "SHA1 hash of the tree object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "projectId",
            "description": "Project Id.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "recursive",
            "description": "Search recursively. Include trees underneath this tree. Default is false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "fileName",
            "description": "Name to use if a .zip file is returned. Default is the object ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "$format",
            "description": "Use \"zip\". Defaults to the MIME type set in the Accept header.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/zip": {
                "schema": {
                  "$ref": "#/components/schemas/GitTreeRef"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitTreeRef"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryNameOrId}/commits/{commitId}/mergebases": {
      "get": {
        "tags": [
          "Merge Bases"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "mergeBases",
        "x-ms-vss-method": "GetMergeBases",
        "description": "Find the merge bases of two commits, optionally across forks. If otherRepositoryId is not specified, the merge bases will only be calculated within the context of the local repositoryNameOrId.",
        "operationId": "Merge Bases_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryNameOrId",
            "description": "ID or name of the local repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "commitId",
            "description": "First commit, usually the tip of the target branch of the potential merge.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "otherCommitId",
            "description": "Other commit, usually the tip of the source branch of the potential merge.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "otherCollectionId",
            "description": "The collection ID where otherCommitId lives.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "query",
            "name": "otherRepositoryId",
            "description": "The repository ID where otherCommitId lives.",
            "required": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitCommitRef"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryNameOrId}/forks/{collectionId}": {
      "get": {
        "tags": [
          "Forks"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "forks",
        "x-ms-vss-method": "GetForks",
        "description": "Retrieve all forks of a repository in the collection.",
        "operationId": "Forks_List",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryNameOrId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "collectionId",
            "description": "Team project collection ID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "True to include links.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitRepositoryRef"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryNameOrId}/forkSyncRequests": {
      "post": {
        "tags": [
          "Forks"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "forkSyncRequests",
        "x-ms-vss-method": "CreateForkSyncRequest",
        "description": "Request that another repository's refs be fetched into this one. It syncs two existing forks. To create a fork, please see the <a href=\"https://docs.microsoft.com/en-us/rest/api/vsts/git/repositories/create?view=azure-devops-rest-5.1\"> repositories endpoint</a>",
        "operationId": "Forks_Create fork sync request",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryNameOrId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "True to include links",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitForkSyncRequestParameters"
              }
            }
          },
          "description": "Source repository and ref mapping.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitForkSyncRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_write"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Forks"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "forkSyncRequests",
        "x-ms-vss-method": "GetForkSyncRequests",
        "description": "Retrieve all requested fork sync operations on this repository.",
        "operationId": "Forks_Get Fork Sync Requests",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryNameOrId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeAbandoned",
            "description": "True to include abandoned requests.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "True to include links.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GitForkSyncRequest"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryNameOrId}/forkSyncRequests/{forkSyncOperationId}": {
      "get": {
        "tags": [
          "Forks"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "forkSyncRequests",
        "x-ms-vss-method": "GetForkSyncRequest",
        "description": "Get a specific fork sync operation's details.",
        "operationId": "Forks_Get fork sync request",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryNameOrId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "forkSyncOperationId",
            "description": "OperationId of the sync request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "x-ms-required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "True to include links.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitForkSyncRequest"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryNameOrId}/merges": {
      "post": {
        "tags": [
          "Merges"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "merges",
        "x-ms-vss-method": "CreateMergeRequest",
        "description": "Request a git merge operation. Currently we support merging only 2 commits.",
        "operationId": "Merges_Create",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryNameOrId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "True to include links",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GitMergeParameters"
              }
            }
          },
          "description": "Parents commitIds and merge commit messsage.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitMerge"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code_manage"
            ]
          }
        ]
      }
    },
    "/{organization}/{project}/_apis/git/repositories/{repositoryNameOrId}/merges/{mergeOperationId}": {
      "get": {
        "tags": [
          "Merges"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "merges",
        "x-ms-vss-method": "GetMergeRequest",
        "description": "Get a specific merge operation's details.",
        "operationId": "Merges_Get",
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "description": "The name of the Azure DevOps organization.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "project",
            "description": "Project ID or project name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "repositoryNameOrId",
            "description": "The name or ID of the repository.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "mergeOperationId",
            "description": "OperationId of the merge request.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "in": "query",
            "name": "includeLinks",
            "description": "True to include links",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GitMerge"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.code"
            ]
          }
        ]
      }
    },
    "/_apis/profile/profiles/{id}": {
      "get": {
        "tags": [
          "Profiles"
        ],
        "x-ms-docs-override-version": "7.1",
        "x-ms-vss-resource": "profiles",
        "x-ms-vss-method": "GetProfile",
        "description": "Gets a user profile.",
        "operationId": "Profiles_Get",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the target user profile within the same organization, or 'me' to get the profile of the current authenticated user.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "details",
            "description": "Return public profile information such as display name, email address, country, etc. If false, the withAttributes parameter is ignored.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "withAttributes",
            "description": "If true, gets the attributes (named key-value pairs of arbitrary data) associated with the profile. The partition parameter must also have a value.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "partition",
            "description": "The partition (named group) of attributes to return.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "coreAttributes",
            "description": "A comma-delimited list of core profile attributes to return. Valid values are Email, Avatar, DisplayName, and ContactWithOffers.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "forceRefresh",
            "description": "Not used in this version of the API.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/api-Version"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Profile"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "vso.profile"
            ]
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "Accounts"
    },
    {
      "name": "Annotated Tags",
      "description": "Git annotated tags are tags with additional metadata including the person who created the tag and a comment."
    },
    {
      "name": "Blobs",
      "description": "Blobs are files in the Git repository."
    },
    {
      "name": "Cherry Picks",
      "description": "This API provides a way to cherry pick into a new branch either a specific commit or commits that are associated to a\npull request."
    },
    {
      "name": "Commits",
      "description": "Controller to handle all REST calls against commits"
    },
    {
      "name": "Diffs",
      "description": "Diffs compare a target version with a base version and return a list of items that are only in the target version.\nIf either the target or base version isn't specified, then the default branch is used."
    },
    {
      "name": "Forks"
    },
    {
      "name": "Import Requests",
      "description": "Create, query, and update requests to import data from another source control system."
    },
    {
      "name": "Items",
      "description": "Items are the files, folders, and submodules in a repository.\nFiles are represented by blobs and folders are trees.\nIf the repository contains submodules, they will appear as commits."
    },
    {
      "name": "Merge Bases",
      "description": "Ways to find merge base(s) between commits."
    },
    {
      "name": "Merges",
      "description": "Merge endpoints provides a way to perform git merge operation."
    },
    {
      "name": "Policy Configurations",
      "description": "This API provides a way to list Git policy configurations.  For more information, see \n[Improve code quality with branch policies](https://go.microsoft.com/fwlink/?linkid=859025)"
    },
    {
      "name": "Pull Request Attachments",
      "description": "This API provides a way to create and retrieve files that have been attached to a pull request"
    },
    {
      "name": "Pull Request Comment Likes",
      "description": "This API provides methods for marking comments on pull requests as liked.\nLiking a comment is a used as a way of indicating agreement with the author."
    },
    {
      "name": "Pull Request Commits",
      "description": "Provides REST API methods for Git commits associated with a pull request."
    },
    {
      "name": "Pull Request Iteration Changes",
      "description": "Controller to handle all REST calls against pull request iterations"
    },
    {
      "name": "Pull Request Iterations",
      "description": "Provides REST API methods for Git pull request iterations.\nIterations are created as a result of creating and pushing updates to a pull request."
    },
    {
      "name": "Pull Request Iteration Statuses",
      "description": "Pull request statuses can be posted on pull request iteration to indicate that status links particular iteration. Iteration statuses behave the same way\nas pull request statuses, but can expire on new source updates when StatusPolicy is properly configured.\n\nPull request statuses provide extensibility to the pull request experience. Third party services or users with read permission to the repository\ncan create and get statuses associated with a pull request or an iteration via this REST API. An example of pull request status can be \"CI Build Passed\",\n\"Integration tests pending\", \"Linting check succeeded\".\nIn order to update a status create a new status with the same genre and name values."
    },
    {
      "name": "Pull Request Labels",
      "description": "Pull Request labels (tags) provide extensibility to the pull request experience. \nThird party services or users with read permission in the repository can\ncreate (add), get, and delete labels (tags) associated with a pull request via this REST API.\nThe names for the labels is shared  with work item tags. There is separate REST API used to manage the list of tags.\nLabels (tags) are used to provide quick insights into a pull request, an example\ncan be labelling a Pull request as \"WIP\", \"Feature\", or \"Bug\" to let others\nknow the state and purpose of the Pull Request.\n\nLabels are posted to the pull request and will be displayed in both the details and list views for pull requests."
    },
    {
      "name": "Pull Request Properties",
      "description": "This API provides a way to manage external properties associated with a pull request. Third party services can use this API\nto store additional information on the pull request without maintaining their own storage."
    },
    {
      "name": "Pull Request Query"
    },
    {
      "name": "Pull Request Reviewers"
    },
    {
      "name": "Pull Requests",
      "description": "This API provides a way to create, retrieve, and modify pull requests."
    },
    {
      "name": "Pull Request Share"
    },
    {
      "name": "Pull Request Statuses",
      "description": "Pull request statuses provide extensibility to the pull request experience. Third party services or users with read permission to the repository\ncan create and get statuses associated with a pull request or an iteration via this REST API. An example of pull request status can be \"CI Build Passed\",\n\"Integration tests pending\", \"Linting check succeeded\".\nIn order to update a status create a new status with the same genre and name values."
    },
    {
      "name": "Pull Request Thread Comments",
      "description": "This API provides a way to retrieve or modify comments associated with threads in a pull request.\nEach thread in a pull request can contain one or more comments."
    },
    {
      "name": "Pull Request Threads",
      "description": "This API provides a way to retrieve or modify threads in a pull request.\nEach thread in a pull request can contain one or more comments."
    },
    {
      "name": "Pull Request Work Items",
      "description": "This API provides a way to manipulate the work items associated with a pull request."
    },
    {
      "name": "Pushes",
      "description": "Create and Query Git pushes."
    },
    {
      "name": "Refs",
      "description": "Controller to handle REST requests for git refs"
    },
    {
      "name": "Refs Favorites",
      "description": "Controller to handle REST requests for Git Ref Favorites"
    },
    {
      "name": "Repositories",
      "description": "Controller to handle all REST calls against Git Repositories"
    },
    {
      "name": "Reverts",
      "description": "This API provides a way to revert into a new branch either a specific commit or commits that are associated to a\npull request."
    },
    {
      "name": "Stats",
      "description": "Branch statistics indicate how far behind and ahead a branch is from the default branch. \nBranch A is \"ahead\" of branch B if branch A contains commits not in branch B's history."
    },
    {
      "name": "Statuses",
      "description": "This API provides a way to manipulate statuses associated with the Git commit.\nCommit status allows you to mark commits with status information from other systems.\nFor instance, it's used in VSTS to surface the state of the build associated with the status in the web UI."
    },
    {
      "name": "Suggestions",
      "description": "API for retrieving git pull request suggestions."
    },
    {
      "name": "Trees"
    },
    {
      "name": "Profiles"
    }
  ],
  "security": [
    {
      "accessToken": []
    }
  ],
  "servers": [
    {
      "url": "https://app.vssps.visualstudio.com"
    }
  ],
  "components": {
    "parameters": {
      "api-Version": {
        "name": "api-version",
        "in": "query",
        "description": "Version of the API to use.  This should be set to '7.1' to use this version of the api.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "api-Version-preview.1": {
        "name": "api-version",
        "in": "query",
        "description": "Version of the API to use.  This should be set to '7.1-preview.1' to use this version of the api.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "api-Version-preview.2": {
        "name": "api-version",
        "in": "query",
        "description": "Version of the API to use.  This should be set to '7.1-preview.2' to use this version of the api.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "GitAsyncRefOperationParameters": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GitAsyncRefOperationParameters"
            }
          }
        },
        "required": true
      },
      "GitPullRequestStatus": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GitPullRequestStatus"
            }
          }
        },
        "description": "Pull request status to create.",
        "required": true
      },
      "JsonPatchDocument": {
        "content": {
          "application/json-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/JsonPatchDocument"
            }
          }
        },
        "description": "Operations to apply to the pull request statuses in JSON Patch format.",
        "required": true
      }
    },
    "securitySchemes": {
      "accessToken": {
        "type": "http",
        "description": "Personal access token. Use any value for the user name and the token as the password.",
        "scheme": "basic"
      },
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://app.vssps.visualstudio.com/oauth2/authorize&response_type=Assertion",
            "tokenUrl": "https://app.vssps.visualstudio.com/oauth2/token",
            "scopes": {
              "vso.profile": "Grants the ability to read your profile, accounts, collections, projects, teams, and other top-level organizational artifacts.",
              "vso.profile_write": "Grants the ability to write to your profile."
            }
          }
        }
      }
    },
    "schemas": {
      "Account": {
        "description": "",
        "type": "object",
        "properties": {
          "accountId": {
            "description": "Identifier for an Account",
            "type": "string",
            "format": "uuid"
          },
          "accountName": {
            "description": "Name for an account",
            "type": "string"
          },
          "accountOwner": {
            "description": "Owner of account",
            "type": "string",
            "format": "uuid"
          },
          "accountStatus": {
            "description": "Current account status",
            "enum": [
              "none",
              "enabled",
              "disabled",
              "deleted",
              "moved"
            ],
            "x-ms-enum": {
              "name": "AccountStatus",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "enabled",
                  "description": "This hosting account is active and assigned to a customer."
                },
                {
                  "value": "disabled",
                  "description": "This hosting account is disabled."
                },
                {
                  "value": "deleted",
                  "description": "This account is part of deletion batch and scheduled for deletion."
                },
                {
                  "value": "moved",
                  "description": "This account is not mastered locally and has physically moved."
                }
              ]
            }
          },
          "accountType": {
            "description": "Type of account: Personal, Organization",
            "enum": [
              "personal",
              "organization"
            ],
            "x-ms-enum": {
              "name": "AccountType",
              "values": [
                {
                  "value": "personal",
                  "description": ""
                },
                {
                  "value": "organization",
                  "description": ""
                }
              ]
            }
          },
          "accountUri": {
            "description": "Uri for an account",
            "type": "string"
          },
          "createdBy": {
            "description": "Who created the account",
            "type": "string",
            "format": "uuid"
          },
          "createdDate": {
            "description": "Date account was created",
            "type": "string",
            "format": "date-time"
          },
          "hasMoved": {
            "type": "boolean"
          },
          "lastUpdatedBy": {
            "description": "Identity of last person to update the account",
            "type": "string",
            "format": "uuid"
          },
          "lastUpdatedDate": {
            "description": "Date account was last updated",
            "type": "string",
            "format": "date-time"
          },
          "namespaceId": {
            "description": "Namespace for an account",
            "type": "string",
            "format": "uuid"
          },
          "newCollectionId": {
            "type": "string",
            "format": "uuid"
          },
          "organizationName": {
            "description": "Organization that created the account",
            "type": "string"
          },
          "properties": {
            "$ref": "#/components/schemas/PropertiesCollection"
          },
          "statusReason": {
            "description": "Reason for current status",
            "type": "string"
          }
        }
      },
      "AccountCreateInfoInternal": {
        "description": "",
        "type": "object",
        "properties": {
          "accountName": {
            "type": "string"
          },
          "creator": {
            "type": "string",
            "format": "uuid"
          },
          "organization": {
            "type": "string"
          },
          "preferences": {
            "$ref": "#/components/schemas/AccountPreferencesInternal"
          },
          "properties": {
            "$ref": "#/components/schemas/PropertiesCollection"
          },
          "serviceDefinitions": {
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "AccountPreferencesInternal": {
        "description": "",
        "type": "object",
        "properties": {
          "culture": {
            "type": "string",
            "format": "CultureInfo"
          },
          "language": {
            "type": "string",
            "format": "CultureInfo"
          },
          "timeZone": {
            "type": "string",
            "format": "TimeZoneInfo"
          }
        }
      },
      "PropertiesCollection": {
        "description": "The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.",
        "type": "object",
        "properties": {
          "count": {
            "description": "The count of properties in the collection.",
            "type": "integer",
            "format": "int32"
          },
          "item": {
            "type": "object"
          },
          "keys": {
            "description": "The set of keys in the collection.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "values": {
            "description": "The set of values in the collection.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VssJsonCollectionWrapper": {
        "description": "This class is used to serialize collections as a single JSON object on the wire.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/VssJsonCollectionWrapperBase"
          }
        ],
        "properties": {
          "value": {
            "description": "The serialized item.",
            "type": "string",
            "format": "T"
          }
        }
      },
      "VssJsonCollectionWrapperBase": {
        "description": "",
        "type": "object",
        "properties": {
          "count": {
            "description": "The number of serialized items.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AdvSecEnablementStatus": {
        "description": "",
        "type": "object",
        "properties": {
          "changedById": {
            "description": "Enabled by VSID",
            "type": "string",
            "format": "uuid"
          },
          "changedOnDate": {
            "description": "Enabled changed on datetime",
            "type": "string",
            "format": "date-time"
          },
          "enabled": {
            "description": "Enabled status 0 disabled, 1 enabled, Null never explicitly set, always whatever project is, ya this should probably be an enum somewhere",
            "type": "boolean"
          },
          "enabledChangedOnDate": {
            "description": "Enabled changed on datetime To Be Removed M223 +",
            "type": "string",
            "format": "date-time"
          },
          "projectId": {
            "description": "ProjectId",
            "type": "string",
            "format": "uuid"
          },
          "repositoryId": {
            "description": "RepositoryId",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "AdvSecEnablementUpdate": {
        "description": "",
        "type": "object",
        "properties": {
          "newStatus": {
            "description": "New status",
            "type": "boolean"
          },
          "projectId": {
            "description": "ProjectId",
            "type": "string",
            "format": "uuid"
          },
          "repositoryId": {
            "description": "RepositoryId Actual RepositoryId to Modify or Magic Repository Id \"FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF\" for ALL Repositories for that project",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "AssociatedWorkItem": {
        "description": "",
        "type": "object",
        "properties": {
          "assignedTo": {
            "type": "string"
          },
          "id": {
            "description": "Id of associated the work item.",
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "description": "REST Url of the work item.",
            "type": "string"
          },
          "webUrl": {
            "type": "string"
          },
          "workItemType": {
            "type": "string"
          }
        }
      },
      "AsyncGitOperationNotification": {
        "description": "",
        "type": "object",
        "properties": {
          "operationId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AsyncRefOperationCommitLevelEventNotification": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncGitOperationNotification"
          }
        ],
        "properties": {
          "commitId": {
            "type": "string"
          }
        }
      },
      "AsyncRefOperationCompletedNotification": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncGitOperationNotification"
          }
        ],
        "properties": {
          "newRefName": {
            "type": "string"
          }
        }
      },
      "AsyncRefOperationConflictNotification": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncRefOperationCommitLevelEventNotification"
          }
        ],
        "properties": {}
      },
      "AsyncRefOperationGeneralFailureNotification": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncGitOperationNotification"
          }
        ],
        "properties": {}
      },
      "AsyncRefOperationProgressNotification": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncRefOperationCommitLevelEventNotification"
          }
        ],
        "properties": {
          "progress": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "AsyncRefOperationTimeoutNotification": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AsyncGitOperationNotification"
          }
        ],
        "properties": {}
      },
      "Attachment": {
        "description": "Meta data for a file attached to an artifact.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "author": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "contentHash": {
            "description": "Content hash of on-disk representation of file content. Its calculated by the server by using SHA1 hash function.",
            "type": "string"
          },
          "createdDate": {
            "description": "The time the attachment was uploaded.",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "The description of the attachment.",
            "type": "string"
          },
          "displayName": {
            "description": "The display name of the attachment. Can't be null or empty.",
            "type": "string"
          },
          "id": {
            "description": "Id of the attachment.",
            "type": "integer",
            "format": "int32"
          },
          "properties": {
            "$ref": "#/components/schemas/PropertiesCollection"
          },
          "url": {
            "description": "The url to download the content of the attachment.",
            "type": "string"
          }
        }
      },
      "AutoCompleteUpdatedEvent": {
        "description": "Real time event (SignalR) for an auto-complete update on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "BillableCommitter": {
        "description": "Used by AdvSec to return billable committers.",
        "type": "object",
        "properties": {
          "repoId": {
            "description": "RepositoryId commit was pushed to.",
            "type": "string",
            "format": "uuid"
          },
          "vsid": {
            "description": "Visual Studio ID /Team Foundation ID",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "BillableCommitterDetail": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BillableCommitter"
          }
        ],
        "properties": {
          "commitId": {
            "description": "ID (SHA-1) of the commit.",
            "type": "string"
          },
          "committerEmail": {
            "description": "Committer email address after parsing.",
            "type": "string"
          },
          "commitTime": {
            "description": "Time reported by the commit.",
            "type": "string",
            "format": "date-time"
          },
          "projectId": {
            "description": "Project Id commit was pushed to.",
            "type": "string",
            "format": "uuid"
          },
          "projectName": {
            "description": "Project name commit was pushed to.",
            "type": "string"
          },
          "pushedTime": {
            "description": "Time of the push that contained the commit.",
            "type": "string",
            "format": "date-time"
          },
          "pushId": {
            "description": "Push Id that contained the commit.",
            "type": "integer",
            "format": "int32"
          },
          "repoName": {
            "description": "Repository name commit was pushed to.",
            "type": "string"
          }
        }
      },
      "BranchUpdatedEvent": {
        "description": "Real time event (SignalR) for a source/target branch update on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {
          "isSourceUpdate": {
            "description": "If true, the source branch of the pull request was updated",
            "type": "boolean"
          }
        }
      },
      "Change": {
        "description": "",
        "type": "object",
        "properties": {
          "changeType": {
            "description": "The type of change that was made to the item.",
            "enum": [
              "none",
              "add",
              "edit",
              "encoding",
              "rename",
              "delete",
              "undelete",
              "branch",
              "merge",
              "lock",
              "rollback",
              "sourceRename",
              "targetRename",
              "property",
              "all"
            ],
            "x-ms-enum": {
              "name": "VersionControlChangeType",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "add",
                  "description": ""
                },
                {
                  "value": "edit",
                  "description": ""
                },
                {
                  "value": "encoding",
                  "description": ""
                },
                {
                  "value": "rename",
                  "description": ""
                },
                {
                  "value": "delete",
                  "description": ""
                },
                {
                  "value": "undelete",
                  "description": ""
                },
                {
                  "value": "branch",
                  "description": ""
                },
                {
                  "value": "merge",
                  "description": ""
                },
                {
                  "value": "lock",
                  "description": ""
                },
                {
                  "value": "rollback",
                  "description": ""
                },
                {
                  "value": "sourceRename",
                  "description": ""
                },
                {
                  "value": "targetRename",
                  "description": ""
                },
                {
                  "value": "property",
                  "description": ""
                },
                {
                  "value": "all",
                  "description": ""
                }
              ]
            }
          },
          "item": {
            "description": "Current version.",
            "type": "string",
            "format": "T"
          },
          "newContent": {
            "$ref": "#/components/schemas/ItemContent"
          },
          "sourceServerItem": {
            "description": "Path of the item on the server.",
            "type": "string"
          },
          "url": {
            "description": "URL to retrieve the item.",
            "type": "string"
          }
        }
      },
      "ChangeCountDictionary": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "properties": {}
      },
      "ChangeList": {
        "description": "",
        "type": "object",
        "properties": {
          "allChangesIncluded": {
            "type": "boolean"
          },
          "changeCounts": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            }
          },
          "comment": {
            "type": "string"
          },
          "commentTruncated": {
            "type": "boolean"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckinNote"
            }
          },
          "owner": {
            "type": "string"
          },
          "ownerDisplayName": {
            "type": "string"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid"
          },
          "sortDate": {
            "type": "string",
            "format": "date-time"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "ChangeListSearchCriteria": {
        "description": "Criteria used in a search for change lists",
        "type": "object",
        "properties": {
          "compareVersion": {
            "description": "If provided, a version descriptor to compare against base",
            "type": "string"
          },
          "excludeDeletes": {
            "description": "If true, don't include delete history entries",
            "type": "boolean"
          },
          "followRenames": {
            "description": "Whether or not to follow renames for the given item being queried",
            "type": "boolean"
          },
          "fromDate": {
            "description": "If provided, only include history entries created after this date (string)",
            "type": "string"
          },
          "fromVersion": {
            "description": "If provided, a version descriptor for the earliest change list to include",
            "type": "string"
          },
          "itemPath": {
            "description": "Path of item to search under. If the itemPaths memebr is used then it will take precedence over this.",
            "type": "string"
          },
          "itemPaths": {
            "description": "List of item paths to search under. If this member is used then itemPath will be ignored.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "itemVersion": {
            "description": "Version of the items to search",
            "type": "string"
          },
          "skip": {
            "description": "Number of results to skip (used when clicking more...)",
            "type": "integer",
            "format": "int32"
          },
          "toDate": {
            "description": "If provided, only include history entries created before this date (string)",
            "type": "string"
          },
          "top": {
            "description": "If provided, the maximum number of history entries to return",
            "type": "integer",
            "format": "int32"
          },
          "toVersion": {
            "description": "If provided, a version descriptor for the latest change list to include",
            "type": "string"
          },
          "user": {
            "description": "Alias or display name of user who made the changes",
            "type": "string"
          }
        }
      },
      "CheckinNote": {
        "description": "",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Comment": {
        "description": "Represents a comment which is one of potentially many in a comment thread.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "author": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "commentType": {
            "description": "The comment type at the time of creation.",
            "enum": [
              "unknown",
              "text",
              "codeChange",
              "system"
            ],
            "x-ms-enum": {
              "name": "CommentType",
              "values": [
                {
                  "value": "unknown",
                  "description": "The comment type is not known."
                },
                {
                  "value": "text",
                  "description": "This is a regular user comment."
                },
                {
                  "value": "codeChange",
                  "description": "The comment comes as a result of a code change."
                },
                {
                  "value": "system",
                  "description": "The comment represents a system message."
                }
              ]
            }
          },
          "content": {
            "description": "The comment content.",
            "type": "string"
          },
          "id": {
            "description": "The comment ID. IDs start at 1 and are unique to a pull request.",
            "type": "integer",
            "format": "int16"
          },
          "isDeleted": {
            "description": "Whether or not this comment was soft-deleted.",
            "type": "boolean"
          },
          "lastContentUpdatedDate": {
            "description": "The date the comment's content was last updated.",
            "type": "string",
            "format": "date-time"
          },
          "lastUpdatedDate": {
            "description": "The date the comment was last updated.",
            "type": "string",
            "format": "date-time"
          },
          "parentCommentId": {
            "description": "The ID of the parent comment. This is used for replies.",
            "type": "integer",
            "format": "int16"
          },
          "publishedDate": {
            "description": "The date the comment was first published.",
            "type": "string",
            "format": "date-time"
          },
          "usersLiked": {
            "description": "A list of the users who have liked this comment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityRef"
            }
          }
        }
      },
      "CommentIterationContext": {
        "description": "Comment iteration context is used to identify which diff was being viewed when the thread was created.",
        "type": "object",
        "properties": {
          "firstComparingIteration": {
            "description": "The iteration of the file on the left side of the diff when the thread was created. If this value is equal to SecondComparingIteration, then this version is the common commit between the source and target branches of the pull request.",
            "type": "integer",
            "format": "int16"
          },
          "secondComparingIteration": {
            "description": "The iteration of the file on the right side of the diff when the thread was created.",
            "type": "integer",
            "format": "int16"
          }
        }
      },
      "CommentPosition": {
        "description": "",
        "type": "object",
        "properties": {
          "line": {
            "description": "The line number of a thread's position. Starts at 1.",
            "type": "integer",
            "format": "int32"
          },
          "offset": {
            "description": "The character offset of a thread's position inside of a line. Starts at 0.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CommentThread": {
        "description": "Represents a comment thread of a pull request. A thread contains meta data about the file it was left on along with one or more comments (an initial comment and the subsequent replies).",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "comments": {
            "description": "A list of the comments.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "id": {
            "description": "The comment thread id.",
            "type": "integer",
            "format": "int32"
          },
          "identities": {
            "description": "Set of identities related to this thread",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/IdentityRef"
            }
          },
          "isDeleted": {
            "description": "Specify if the thread is deleted which happens when all comments are deleted.",
            "type": "boolean"
          },
          "lastUpdatedDate": {
            "description": "The time this thread was last updated.",
            "type": "string",
            "format": "date-time"
          },
          "properties": {
            "$ref": "#/components/schemas/PropertiesCollection"
          },
          "publishedDate": {
            "description": "The time this thread was published.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "description": "The status of the comment thread.",
            "enum": [
              "unknown",
              "active",
              "fixed",
              "wontFix",
              "closed",
              "byDesign",
              "pending"
            ],
            "x-ms-enum": {
              "name": "CommentThreadStatus",
              "values": [
                {
                  "value": "unknown",
                  "description": "The thread status is unknown."
                },
                {
                  "value": "active",
                  "description": "The thread status is active."
                },
                {
                  "value": "fixed",
                  "description": "The thread status is resolved as fixed."
                },
                {
                  "value": "wontFix",
                  "description": "The thread status is resolved as won't fix."
                },
                {
                  "value": "closed",
                  "description": "The thread status is closed."
                },
                {
                  "value": "byDesign",
                  "description": "The thread status is resolved as by design."
                },
                {
                  "value": "pending",
                  "description": "The thread status is pending."
                }
              ]
            }
          },
          "threadContext": {
            "$ref": "#/components/schemas/CommentThreadContext"
          }
        }
      },
      "CommentThreadContext": {
        "description": "",
        "type": "object",
        "properties": {
          "filePath": {
            "description": "File path relative to the root of the repository. It's up to the client to use any path format.",
            "type": "string"
          },
          "leftFileEnd": {
            "$ref": "#/components/schemas/CommentPosition"
          },
          "leftFileStart": {
            "$ref": "#/components/schemas/CommentPosition"
          },
          "rightFileEnd": {
            "$ref": "#/components/schemas/CommentPosition"
          },
          "rightFileStart": {
            "$ref": "#/components/schemas/CommentPosition"
          }
        }
      },
      "CommentTrackingCriteria": {
        "description": "Comment tracking criteria is used to identify which iteration context the thread has been tracked to (if any) along with some detail about the original position and filename.",
        "type": "object",
        "properties": {
          "firstComparingIteration": {
            "description": "The iteration of the file on the left side of the diff that the thread will be tracked to. Threads were tracked if this is greater than 0.",
            "type": "integer",
            "format": "int32"
          },
          "origFilePath": {
            "description": "Original filepath the thread was created on before tracking. This will be different than the current thread filepath if the file in question was renamed in a later iteration.",
            "type": "string"
          },
          "origLeftFileEnd": {
            "$ref": "#/components/schemas/CommentPosition"
          },
          "origLeftFileStart": {
            "$ref": "#/components/schemas/CommentPosition"
          },
          "origRightFileEnd": {
            "$ref": "#/components/schemas/CommentPosition"
          },
          "origRightFileStart": {
            "$ref": "#/components/schemas/CommentPosition"
          },
          "secondComparingIteration": {
            "description": "The iteration of the file on the right side of the diff that the thread will be tracked to. Threads were tracked if this is greater than 0.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "CompletionErrorsEvent": {
        "description": "Real time event (SignalR) for a completion errors on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {
          "errorMessage": {
            "description": "The error message associated with the completion error",
            "type": "string"
          }
        }
      },
      "DiscussionsUpdatedEvent": {
        "description": "Real time event (SignalR) for a discussions update on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "FileContentMetadata": {
        "description": "",
        "type": "object",
        "properties": {
          "contentType": {
            "type": "string"
          },
          "encoding": {
            "type": "integer",
            "format": "int32"
          },
          "extension": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "isBinary": {
            "type": "boolean"
          },
          "isImage": {
            "type": "boolean"
          },
          "vsLink": {
            "type": "string"
          }
        }
      },
      "FileDiff": {
        "description": "Provides properties that describe file differences",
        "type": "object",
        "properties": {
          "lineDiffBlocks": {
            "description": "The collection of line diff blocks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineDiffBlock"
            }
          },
          "originalPath": {
            "description": "Original path of item if different from current path.",
            "type": "string"
          },
          "path": {
            "description": "Current path of item",
            "type": "string"
          }
        }
      },
      "FileDiffParams": {
        "description": "Provides parameters that describe inputs for the file diff",
        "type": "object",
        "properties": {
          "originalPath": {
            "description": "Original path of the file",
            "type": "string"
          },
          "path": {
            "description": "Current path of the file",
            "type": "string"
          }
        }
      },
      "FileDiffsCriteria": {
        "description": "Provides properties that describe inputs for the file diffs",
        "type": "object",
        "properties": {
          "baseVersionCommit": {
            "description": "Commit ID of the base version",
            "type": "string"
          },
          "fileDiffParams": {
            "description": "List of parameters for each of the files for which we need to get the file diff",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileDiffParams"
            }
          },
          "targetVersionCommit": {
            "description": "Commit ID of the target version",
            "type": "string"
          }
        }
      },
      "GitAnnotatedTag": {
        "description": "A Git annotated tag.",
        "type": "object",
        "properties": {
          "message": {
            "description": "The tagging Message",
            "type": "string"
          },
          "name": {
            "description": "The name of the annotated tag.",
            "type": "string"
          },
          "objectId": {
            "description": "The objectId (Sha1Id) of the tag.",
            "type": "string"
          },
          "taggedBy": {
            "$ref": "#/components/schemas/GitUserDate"
          },
          "taggedObject": {
            "$ref": "#/components/schemas/GitObject"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GitAsyncRefOperation": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "detailedStatus": {
            "$ref": "#/components/schemas/GitAsyncRefOperationDetail"
          },
          "parameters": {
            "$ref": "#/components/schemas/GitAsyncRefOperationParameters"
          },
          "status": {
            "enum": [
              "queued",
              "inProgress",
              "completed",
              "failed",
              "abandoned"
            ],
            "x-ms-enum": {
              "name": "GitAsyncOperationStatus",
              "values": [
                {
                  "value": "queued",
                  "description": "The operation is waiting in a queue and has not yet started."
                },
                {
                  "value": "inProgress",
                  "description": "The operation is currently in progress."
                },
                {
                  "value": "completed",
                  "description": "The operation has completed."
                },
                {
                  "value": "failed",
                  "description": "The operation has failed. Check for an error message."
                },
                {
                  "value": "abandoned",
                  "description": "The operation has been abandoned."
                }
              ]
            }
          },
          "url": {
            "description": "A URL that can be used to make further requests for status about the operation",
            "type": "string"
          }
        }
      },
      "GitAsyncRefOperationDetail": {
        "description": "Information about the progress of a cherry pick or revert operation.",
        "type": "object",
        "properties": {
          "conflict": {
            "description": "Indicates if there was a conflict generated when trying to cherry pick or revert the changes.",
            "type": "boolean"
          },
          "currentCommitId": {
            "description": "The current commit from the list of commits that are being cherry picked or reverted.",
            "type": "string"
          },
          "failureMessage": {
            "description": "Detailed information about why the cherry pick or revert failed to complete.",
            "type": "string"
          },
          "progress": {
            "description": "A number between 0 and 1 indicating the percent complete of the operation.",
            "type": "number",
            "format": "double"
          },
          "status": {
            "description": "Provides a status code that indicates the reason the cherry pick or revert failed.",
            "enum": [
              "none",
              "invalidRefName",
              "refNameConflict",
              "createBranchPermissionRequired",
              "writePermissionRequired",
              "targetBranchDeleted",
              "gitObjectTooLarge",
              "operationIndentityNotFound",
              "asyncOperationNotFound",
              "other",
              "emptyCommitterSignature"
            ],
            "x-ms-enum": {
              "name": "GitAsyncRefOperationFailureStatus",
              "values": [
                {
                  "value": "none",
                  "description": "No status"
                },
                {
                  "value": "invalidRefName",
                  "description": "Indicates that the ref update request could not be completed because the ref name presented in the request was not valid."
                },
                {
                  "value": "refNameConflict",
                  "description": "The ref update could not be completed because, in case-insensitive mode, the ref name conflicts with an existing, differently-cased ref name."
                },
                {
                  "value": "createBranchPermissionRequired",
                  "description": "The ref update request could not be completed because the user lacks the permission to create a branch"
                },
                {
                  "value": "writePermissionRequired",
                  "description": "The ref update request could not be completed because the user lacks write permissions required to write this ref"
                },
                {
                  "value": "targetBranchDeleted",
                  "description": "Target branch was deleted after Git async operation started"
                },
                {
                  "value": "gitObjectTooLarge",
                  "description": "Git object is too large to materialize into memory"
                },
                {
                  "value": "operationIndentityNotFound",
                  "description": "Identity who authorized the operation was not found"
                },
                {
                  "value": "asyncOperationNotFound",
                  "description": "Async operation was not found"
                },
                {
                  "value": "other",
                  "description": "Unexpected failure"
                },
                {
                  "value": "emptyCommitterSignature",
                  "description": "Initiator of async operation has signature with empty name or email"
                }
              ]
            }
          },
          "timedout": {
            "description": "Indicates if the operation went beyond the maximum time allowed for a cherry pick or revert operation.",
            "type": "boolean"
          }
        }
      },
      "GitAsyncRefOperationParameters": {
        "description": "Parameters that are provided in the request body when requesting to cherry pick or revert.",
        "type": "object",
        "properties": {
          "generatedRefName": {
            "description": "Proposed target branch name for the cherry pick or revert operation.",
            "type": "string"
          },
          "ontoRefName": {
            "description": "The target branch for the cherry pick or revert operation.",
            "type": "string"
          },
          "repository": {
            "$ref": "#/components/schemas/GitRepository"
          },
          "source": {
            "$ref": "#/components/schemas/GitAsyncRefOperationSource"
          }
        }
      },
      "GitAsyncRefOperationSource": {
        "description": "GitAsyncRefOperationSource specifies the pull request or list of commits to use when making a cherry pick and revert operation request. Only one should be provided.",
        "type": "object",
        "properties": {
          "commitList": {
            "description": "A list of commits to cherry pick or revert",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitCommitRef"
            }
          },
          "pullRequestId": {
            "description": "Id of the pull request to cherry pick or revert",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GitBaseVersionDescriptor": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitVersionDescriptor"
          }
        ],
        "properties": {
          "baseVersion": {
            "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
            "type": "string"
          },
          "baseVersionOptions": {
            "description": "Version options - Specify additional modifiers to version (e.g Previous)",
            "enum": [
              "none",
              "previousChange",
              "firstParent"
            ],
            "x-ms-enum": {
              "name": "GitVersionOptions",
              "values": [
                {
                  "value": "none",
                  "description": "Not specified"
                },
                {
                  "value": "previousChange",
                  "description": "Commit that changed item prior to the current version"
                },
                {
                  "value": "firstParent",
                  "description": "First parent of commit (HEAD^)"
                }
              ]
            }
          },
          "baseVersionType": {
            "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
            "enum": [
              "branch",
              "tag",
              "commit"
            ],
            "x-ms-enum": {
              "name": "GitVersionType",
              "values": [
                {
                  "value": "branch",
                  "description": "Interpret the version as a branch name"
                },
                {
                  "value": "tag",
                  "description": "Interpret the version as a tag name"
                },
                {
                  "value": "commit",
                  "description": "Interpret the version as a commit ID (SHA1)"
                }
              ]
            }
          }
        }
      },
      "GitBlobRef": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "objectId": {
            "description": "SHA1 hash of git object",
            "type": "string"
          },
          "size": {
            "description": "Size of blob content (in bytes)",
            "type": "integer",
            "format": "int64"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GitBranchStats": {
        "description": "Ahead and behind counts for a particular ref.",
        "type": "object",
        "properties": {
          "aheadCount": {
            "description": "Number of commits ahead.",
            "type": "integer",
            "format": "int32"
          },
          "behindCount": {
            "description": "Number of commits behind.",
            "type": "integer",
            "format": "int32"
          },
          "commit": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "isBaseVersion": {
            "description": "True if this is the result for the base version.",
            "type": "boolean"
          },
          "name": {
            "description": "Name of the ref.",
            "type": "string"
          }
        }
      },
      "GitChange": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Change"
          }
        ],
        "properties": {
          "changeId": {
            "description": "ID of the change within the group of changes.",
            "type": "integer",
            "format": "int32"
          },
          "newContentTemplate": {
            "$ref": "#/components/schemas/GitTemplate"
          },
          "originalPath": {
            "description": "Original path of item if different from current path.",
            "type": "string"
          }
        }
      },
      "GitCherryPick": {
        "description": "This object is returned from Cherry Pick operations and provides the id and status of the operation",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitAsyncRefOperation"
          }
        ],
        "properties": {
          "cherryPickId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GitCommit": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitCommitRef"
          }
        ],
        "properties": {
          "treeId": {
            "type": "string"
          }
        }
      },
      "GitCommitChanges": {
        "description": "",
        "type": "object",
        "properties": {
          "changeCounts": {
            "$ref": "#/components/schemas/ChangeCountDictionary"
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitChange"
            }
          }
        }
      },
      "GitCommitDiffs": {
        "description": "",
        "type": "object",
        "properties": {
          "aheadCount": {
            "type": "integer",
            "format": "int32"
          },
          "allChangesIncluded": {
            "type": "boolean"
          },
          "baseCommit": {
            "type": "string"
          },
          "behindCount": {
            "type": "integer",
            "format": "int32"
          },
          "changeCounts": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitChange"
            }
          },
          "commonCommit": {
            "type": "string"
          },
          "targetCommit": {
            "type": "string"
          }
        }
      },
      "GitCommitRef": {
        "description": "Provides properties that describe a Git commit and associated metadata.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "author": {
            "$ref": "#/components/schemas/GitUserDate"
          },
          "changeCounts": {
            "$ref": "#/components/schemas/ChangeCountDictionary"
          },
          "changes": {
            "description": "An enumeration of the changes included with the commit.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitChange"
            }
          },
          "comment": {
            "description": "Comment or message of the commit.",
            "type": "string"
          },
          "commentTruncated": {
            "description": "Indicates if the comment is truncated from the full Git commit comment message.",
            "type": "boolean"
          },
          "commitId": {
            "description": "ID (SHA-1) of the commit.",
            "type": "string"
          },
          "committer": {
            "$ref": "#/components/schemas/GitUserDate"
          },
          "commitTooManyChanges": {
            "description": "Indicates that commit contains too many changes to be displayed",
            "type": "boolean"
          },
          "parents": {
            "description": "An enumeration of the parent commit IDs for this commit.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "push": {
            "$ref": "#/components/schemas/GitPushRef"
          },
          "remoteUrl": {
            "description": "Remote URL path to the commit.",
            "type": "string"
          },
          "statuses": {
            "description": "A list of status metadata from services and extensions that may associate additional information to the commit.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitStatus"
            }
          },
          "url": {
            "description": "REST URL for this resource.",
            "type": "string"
          },
          "workItems": {
            "description": "A list of workitems associated with this commit.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRef"
            }
          }
        }
      },
      "GitCommitToCreate": {
        "description": "",
        "type": "object",
        "properties": {
          "baseRef": {
            "$ref": "#/components/schemas/GitRef"
          },
          "comment": {
            "type": "string"
          },
          "pathActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitPathAction"
            }
          }
        }
      },
      "GitConflict": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "conflictId": {
            "type": "integer",
            "format": "int32"
          },
          "conflictPath": {
            "type": "string"
          },
          "conflictType": {
            "enum": [
              "none",
              "addAdd",
              "addRename",
              "deleteEdit",
              "deleteRename",
              "directoryFile",
              "directoryChild",
              "editDelete",
              "editEdit",
              "fileDirectory",
              "rename1to2",
              "rename2to1",
              "renameAdd",
              "renameDelete",
              "renameRename"
            ],
            "x-ms-enum": {
              "name": "GitConflictType",
              "values": [
                {
                  "value": "none",
                  "description": "No conflict"
                },
                {
                  "value": "addAdd",
                  "description": "Added on source and target; content differs"
                },
                {
                  "value": "addRename",
                  "description": "Added on source and rename destination on target"
                },
                {
                  "value": "deleteEdit",
                  "description": "Deleted on source and edited on target"
                },
                {
                  "value": "deleteRename",
                  "description": "Deleted on source and renamed on target"
                },
                {
                  "value": "directoryFile",
                  "description": "Path is a directory on source and a file on target"
                },
                {
                  "value": "directoryChild",
                  "description": "Children of directory which has DirectoryFile or FileDirectory conflict"
                },
                {
                  "value": "editDelete",
                  "description": "Edited on source and deleted on target"
                },
                {
                  "value": "editEdit",
                  "description": "Edited on source and target; content differs"
                },
                {
                  "value": "fileDirectory",
                  "description": "Path is a file on source and a directory on target"
                },
                {
                  "value": "rename1to2",
                  "description": "Same file renamed on both source and target; destination paths differ"
                },
                {
                  "value": "rename2to1",
                  "description": "Different files renamed to same destination path on both source and target"
                },
                {
                  "value": "renameAdd",
                  "description": "Rename destination on source and new file on target"
                },
                {
                  "value": "renameDelete",
                  "description": "Renamed on source and deleted on target"
                },
                {
                  "value": "renameRename",
                  "description": "Rename destination on both source and target; content differs"
                }
              ]
            }
          },
          "mergeBaseCommit": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "mergeOrigin": {
            "$ref": "#/components/schemas/GitMergeOriginRef"
          },
          "mergeSourceCommit": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "mergeTargetCommit": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "resolutionError": {
            "enum": [
              "none",
              "mergeContentNotFound",
              "pathInUse",
              "invalidPath",
              "unknownAction",
              "unknownMergeType",
              "otherError"
            ],
            "x-ms-enum": {
              "name": "GitResolutionError",
              "values": [
                {
                  "value": "none",
                  "description": "No error"
                },
                {
                  "value": "mergeContentNotFound",
                  "description": "User set a blob id for resolving a content merge, but blob was not found in repo during application"
                },
                {
                  "value": "pathInUse",
                  "description": "Attempted to resolve a conflict by moving a file to another path, but path was already in use"
                },
                {
                  "value": "invalidPath",
                  "description": "No error"
                },
                {
                  "value": "unknownAction",
                  "description": "GitResolutionAction was set to an unrecognized value"
                },
                {
                  "value": "unknownMergeType",
                  "description": "GitResolutionMergeType was set to an unrecognized value"
                },
                {
                  "value": "otherError",
                  "description": "Any error for which a more specific code doesn't apply"
                }
              ]
            }
          },
          "resolutionStatus": {
            "enum": [
              "unresolved",
              "partiallyResolved",
              "resolved"
            ],
            "x-ms-enum": {
              "name": "GitResolutionStatus",
              "values": [
                {
                  "value": "unresolved",
                  "description": ""
                },
                {
                  "value": "partiallyResolved",
                  "description": ""
                },
                {
                  "value": "resolved",
                  "description": ""
                }
              ]
            }
          },
          "resolvedBy": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "resolvedDate": {
            "type": "string",
            "format": "date-time"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GitConflictAddAdd": {
        "description": "Data object for AddAdd conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionMergeContent"
          },
          "sourceBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "targetBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          }
        }
      },
      "GitConflictAddRename": {
        "description": "Data object for RenameAdd conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "baseBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionPathConflict"
          },
          "sourceBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "targetBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "targetOriginalPath": {
            "type": "string"
          }
        }
      },
      "GitConflictDeleteEdit": {
        "description": "Data object for EditDelete conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "baseBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionPickOneAction"
          },
          "targetBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          }
        }
      },
      "GitConflictDeleteRename": {
        "description": "Data object for RenameDelete conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "baseBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionPickOneAction"
          },
          "targetBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "targetNewPath": {
            "type": "string"
          }
        }
      },
      "GitConflictDirectoryFile": {
        "description": "Data object for FileDirectory conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionPathConflict"
          },
          "sourceTree": {
            "$ref": "#/components/schemas/GitTreeRef"
          },
          "targetBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          }
        }
      },
      "GitConflictEditDelete": {
        "description": "Data object for DeleteEdit conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "baseBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionPickOneAction"
          },
          "sourceBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          }
        }
      },
      "GitConflictEditEdit": {
        "description": "Data object for EditEdit conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "baseBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionMergeContent"
          },
          "sourceBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "targetBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          }
        }
      },
      "GitConflictFileDirectory": {
        "description": "Data object for DirectoryFile conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionPathConflict"
          },
          "sourceBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "targetTree": {
            "$ref": "#/components/schemas/GitTreeRef"
          }
        }
      },
      "GitConflictRename1to2": {
        "description": "Data object for Rename1to2 conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "baseBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionRename1to2"
          },
          "sourceBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "sourceNewPath": {
            "type": "string"
          },
          "targetBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "targetNewPath": {
            "type": "string"
          }
        }
      },
      "GitConflictRename2to1": {
        "description": "Data object for Rename2to1 conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionPathConflict"
          },
          "sourceNewBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "sourceOriginalBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "sourceOriginalPath": {
            "type": "string"
          },
          "targetNewBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "targetOriginalBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "targetOriginalPath": {
            "type": "string"
          }
        }
      },
      "GitConflictRenameAdd": {
        "description": "Data object for AddRename conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "baseBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionPathConflict"
          },
          "sourceBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "sourceOriginalPath": {
            "type": "string"
          },
          "targetBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          }
        }
      },
      "GitConflictRenameDelete": {
        "description": "Data object for DeleteRename conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "baseBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionPickOneAction"
          },
          "sourceBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "sourceNewPath": {
            "type": "string"
          }
        }
      },
      "GitConflictRenameRename": {
        "description": "Data object for RenameRename conflict",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitConflict"
          }
        ],
        "properties": {
          "baseBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "originalPath": {
            "type": "string"
          },
          "resolution": {
            "$ref": "#/components/schemas/GitResolutionMergeContent"
          },
          "sourceBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "targetBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          }
        }
      },
      "GitConflictUpdateResult": {
        "description": "",
        "type": "object",
        "properties": {
          "conflictId": {
            "description": "Conflict ID that was provided by input",
            "type": "integer",
            "format": "int32"
          },
          "customMessage": {
            "description": "Reason for failing",
            "type": "string"
          },
          "updatedConflict": {
            "$ref": "#/components/schemas/GitConflict"
          },
          "updateStatus": {
            "description": "Status of the update on the server",
            "enum": [
              "succeeded",
              "badRequest",
              "invalidResolution",
              "unsupportedConflictType",
              "notFound"
            ],
            "x-ms-enum": {
              "name": "GitConflictUpdateStatus",
              "values": [
                {
                  "value": "succeeded",
                  "description": "Indicates that pull request conflict update request was completed successfully"
                },
                {
                  "value": "badRequest",
                  "description": "Indicates that the update request did not fit the expected data contract"
                },
                {
                  "value": "invalidResolution",
                  "description": "Indicates that the requested resolution was not valid"
                },
                {
                  "value": "unsupportedConflictType",
                  "description": "Indicates that the conflict in the update request was not a supported conflict type"
                },
                {
                  "value": "notFound",
                  "description": "Indicates that the conflict could not be found"
                }
              ]
            }
          }
        }
      },
      "GitDeletedRepository": {
        "description": "",
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "deletedBy": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "deletedDate": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/TeamProjectReference"
          }
        }
      },
      "GitFilePathsCollection": {
        "description": "",
        "type": "object",
        "properties": {
          "commitId": {
            "type": "string"
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GitForkOperationStatusDetail": {
        "description": "Status information about a requested fork operation.",
        "type": "object",
        "properties": {
          "allSteps": {
            "description": "All valid steps for the forking process",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "currentStep": {
            "description": "Index into AllSteps for the current step",
            "type": "integer",
            "format": "int32"
          },
          "errorMessage": {
            "description": "Error message if the operation failed.",
            "type": "string"
          }
        }
      },
      "GitForkRef": {
        "description": "Information about a fork ref.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitRef"
          }
        ],
        "properties": {
          "repository": {
            "$ref": "#/components/schemas/GitRepository"
          }
        }
      },
      "GitForkSyncRequest": {
        "description": "Request to sync data between two forks.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "detailedStatus": {
            "$ref": "#/components/schemas/GitForkOperationStatusDetail"
          },
          "operationId": {
            "description": "Unique identifier for the operation.",
            "type": "integer",
            "format": "int32"
          },
          "source": {
            "$ref": "#/components/schemas/GlobalGitRepositoryKey"
          },
          "sourceToTargetRefs": {
            "description": "If supplied, the set of ref mappings to use when performing a \"sync\" or create. If missing, all refs will be synchronized.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceToTargetRef"
            }
          },
          "status": {
            "enum": [
              "queued",
              "inProgress",
              "completed",
              "failed",
              "abandoned"
            ],
            "x-ms-enum": {
              "name": "GitAsyncOperationStatus",
              "values": [
                {
                  "value": "queued",
                  "description": "The operation is waiting in a queue and has not yet started."
                },
                {
                  "value": "inProgress",
                  "description": "The operation is currently in progress."
                },
                {
                  "value": "completed",
                  "description": "The operation has completed."
                },
                {
                  "value": "failed",
                  "description": "The operation has failed. Check for an error message."
                },
                {
                  "value": "abandoned",
                  "description": "The operation has been abandoned."
                }
              ]
            }
          }
        }
      },
      "GitForkSyncRequestParameters": {
        "description": "Parameters for creating a fork request",
        "type": "object",
        "properties": {
          "source": {
            "$ref": "#/components/schemas/GlobalGitRepositoryKey"
          },
          "sourceToTargetRefs": {
            "description": "If supplied, the set of ref mappings to use when performing a \"sync\" or create. If missing, all refs will be synchronized.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceToTargetRef"
            }
          }
        }
      },
      "GitForkTeamProjectReference": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TeamProjectReference"
          }
        ],
        "properties": {}
      },
      "GitImportFailedEvent": {
        "description": "",
        "type": "object",
        "properties": {
          "sourceRepositoryName": {
            "type": "string"
          },
          "targetRepository": {
            "$ref": "#/components/schemas/GitRepository"
          }
        }
      },
      "GitImportGitSource": {
        "description": "Parameter for creating a git import request when source is Git version control",
        "type": "object",
        "properties": {
          "overwrite": {
            "description": "Tells if this is a sync request or not",
            "type": "boolean"
          },
          "url": {
            "description": "Url for the source repo",
            "type": "string"
          }
        }
      },
      "GitImportRequest": {
        "description": "A request to import data from a remote source control system.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "detailedStatus": {
            "$ref": "#/components/schemas/GitImportStatusDetail"
          },
          "importRequestId": {
            "description": "The unique identifier for this import request.",
            "type": "integer",
            "format": "int32"
          },
          "parameters": {
            "$ref": "#/components/schemas/GitImportRequestParameters"
          },
          "repository": {
            "$ref": "#/components/schemas/GitRepository"
          },
          "status": {
            "description": "Current status of the import.",
            "enum": [
              "queued",
              "inProgress",
              "completed",
              "failed",
              "abandoned"
            ],
            "x-ms-enum": {
              "name": "GitAsyncOperationStatus",
              "values": [
                {
                  "value": "queued",
                  "description": "The operation is waiting in a queue and has not yet started."
                },
                {
                  "value": "inProgress",
                  "description": "The operation is currently in progress."
                },
                {
                  "value": "completed",
                  "description": "The operation has completed."
                },
                {
                  "value": "failed",
                  "description": "The operation has failed. Check for an error message."
                },
                {
                  "value": "abandoned",
                  "description": "The operation has been abandoned."
                }
              ]
            }
          },
          "url": {
            "description": "A link back to this import request resource.",
            "type": "string"
          }
        }
      },
      "GitImportRequestParameters": {
        "description": "Parameters for creating an import request",
        "type": "object",
        "properties": {
          "deleteServiceEndpointAfterImportIsDone": {
            "description": "Option to delete service endpoint when import is done",
            "type": "boolean"
          },
          "gitSource": {
            "$ref": "#/components/schemas/GitImportGitSource"
          },
          "serviceEndpointId": {
            "description": "Service Endpoint for connection to external endpoint",
            "type": "string",
            "format": "uuid"
          },
          "tfvcSource": {
            "$ref": "#/components/schemas/GitImportTfvcSource"
          }
        }
      },
      "GitImportStatusDetail": {
        "description": "Additional status information about an import request.",
        "type": "object",
        "properties": {
          "allSteps": {
            "description": "All valid steps for the import process",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "currentStep": {
            "description": "Index into AllSteps for the current step",
            "type": "integer",
            "format": "int32"
          },
          "errorMessage": {
            "description": "Error message if the operation failed.",
            "type": "string"
          }
        }
      },
      "GitImportSucceededEvent": {
        "description": "",
        "type": "object",
        "properties": {
          "sourceRepositoryName": {
            "type": "string"
          },
          "targetRepository": {
            "$ref": "#/components/schemas/GitRepository"
          }
        }
      },
      "GitImportTfvcSource": {
        "description": "Parameter for creating a git import request when source is tfvc version control",
        "type": "object",
        "properties": {
          "importHistory": {
            "description": "Set true to import History, false otherwise",
            "type": "boolean"
          },
          "importHistoryDurationInDays": {
            "description": "Get history for last n days (max allowed value is 180 days)",
            "type": "integer",
            "format": "int32"
          },
          "path": {
            "description": "Path which we want to import (this can be copied from Path Control in Explorer)",
            "type": "string"
          }
        }
      },
      "GitItem": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ItemModel"
          }
        ],
        "properties": {
          "commitId": {
            "description": "SHA1 of commit item was fetched at",
            "type": "string"
          },
          "gitObjectType": {
            "description": "Type of object (Commit, Tree, Blob, Tag, ...)",
            "enum": [
              "bad",
              "commit",
              "tree",
              "blob",
              "tag",
              "ext2",
              "ofsDelta",
              "refDelta"
            ],
            "x-ms-enum": {
              "name": "GitObjectType",
              "values": [
                {
                  "value": "bad",
                  "description": ""
                },
                {
                  "value": "commit",
                  "description": ""
                },
                {
                  "value": "tree",
                  "description": ""
                },
                {
                  "value": "blob",
                  "description": ""
                },
                {
                  "value": "tag",
                  "description": ""
                },
                {
                  "value": "ext2",
                  "description": ""
                },
                {
                  "value": "ofsDelta",
                  "description": ""
                },
                {
                  "value": "refDelta",
                  "description": ""
                }
              ]
            }
          },
          "latestProcessedChange": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "objectId": {
            "description": "Git object id",
            "type": "string"
          },
          "originalObjectId": {
            "description": "Git object id",
            "type": "string"
          }
        }
      },
      "GitItemDescriptor": {
        "description": "",
        "type": "object",
        "properties": {
          "path": {
            "description": "Path to item",
            "type": "string"
          },
          "recursionLevel": {
            "description": "Specifies whether to include children (OneLevel), all descendants (Full), or None",
            "enum": [
              "none",
              "oneLevel",
              "oneLevelPlusNestedEmptyFolders",
              "full"
            ],
            "x-ms-enum": {
              "name": "VersionControlRecursionType",
              "values": [
                {
                  "value": "none",
                  "description": "Only return the specified item."
                },
                {
                  "value": "oneLevel",
                  "description": "Return the specified item and its direct children."
                },
                {
                  "value": "oneLevelPlusNestedEmptyFolders",
                  "description": "Return the specified item and its direct children, as well as recursive chains of nested child folders that only contain a single folder."
                },
                {
                  "value": "full",
                  "description": "Return specified item and all descendants"
                }
              ]
            }
          },
          "version": {
            "description": "Version string (interpretation based on VersionType defined in subclass",
            "type": "string"
          },
          "versionOptions": {
            "description": "Version modifiers (e.g. previous)",
            "enum": [
              "none",
              "previousChange",
              "firstParent"
            ],
            "x-ms-enum": {
              "name": "GitVersionOptions",
              "values": [
                {
                  "value": "none",
                  "description": "Not specified"
                },
                {
                  "value": "previousChange",
                  "description": "Commit that changed item prior to the current version"
                },
                {
                  "value": "firstParent",
                  "description": "First parent of commit (HEAD^)"
                }
              ]
            }
          },
          "versionType": {
            "description": "How to interpret version (branch,tag,commit)",
            "enum": [
              "branch",
              "tag",
              "commit"
            ],
            "x-ms-enum": {
              "name": "GitVersionType",
              "values": [
                {
                  "value": "branch",
                  "description": "Interpret the version as a branch name"
                },
                {
                  "value": "tag",
                  "description": "Interpret the version as a tag name"
                },
                {
                  "value": "commit",
                  "description": "Interpret the version as a commit ID (SHA1)"
                }
              ]
            }
          }
        }
      },
      "GitItemRequestData": {
        "description": "",
        "type": "object",
        "properties": {
          "includeContentMetadata": {
            "description": "Whether to include metadata for all items",
            "type": "boolean"
          },
          "includeLinks": {
            "description": "Whether to include the _links field on the shallow references",
            "type": "boolean"
          },
          "itemDescriptors": {
            "description": "Collection of items to fetch, including path, version, and recursion level",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitItemDescriptor"
            }
          },
          "latestProcessedChange": {
            "description": "Whether to include shallow ref to commit that last changed each item",
            "type": "boolean"
          }
        }
      },
      "GitLastChangeItem": {
        "description": "",
        "type": "object",
        "properties": {
          "commitId": {
            "description": "Gets or sets the commit Id this item was modified most recently for the provided version.",
            "type": "string"
          },
          "path": {
            "description": "Gets or sets the path of the item.",
            "type": "string"
          }
        }
      },
      "GitLastChangeTreeItems": {
        "description": "",
        "type": "object",
        "properties": {
          "commits": {
            "description": "The list of commits referenced by Items, if they were requested.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitCommitRef"
            }
          },
          "items": {
            "description": "The last change of items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitLastChangeItem"
            }
          },
          "lastExploredTime": {
            "description": "The last explored time, in case the result is not comprehensive. Null otherwise.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GitMerge": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitMergeParameters"
          }
        ],
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "detailedStatus": {
            "$ref": "#/components/schemas/GitMergeOperationStatusDetail"
          },
          "mergeOperationId": {
            "description": "Unique identifier for the merge operation.",
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "description": "Status of the merge operation.",
            "enum": [
              "queued",
              "inProgress",
              "completed",
              "failed",
              "abandoned"
            ],
            "x-ms-enum": {
              "name": "GitAsyncOperationStatus",
              "values": [
                {
                  "value": "queued",
                  "description": "The operation is waiting in a queue and has not yet started."
                },
                {
                  "value": "inProgress",
                  "description": "The operation is currently in progress."
                },
                {
                  "value": "completed",
                  "description": "The operation has completed."
                },
                {
                  "value": "failed",
                  "description": "The operation has failed. Check for an error message."
                },
                {
                  "value": "abandoned",
                  "description": "The operation has been abandoned."
                }
              ]
            }
          }
        }
      },
      "GitMergeOperationStatusDetail": {
        "description": "Status information about a requested merge operation.",
        "type": "object",
        "properties": {
          "failureMessage": {
            "description": "Error message if the operation failed.",
            "type": "string"
          },
          "mergeCommitId": {
            "description": "The commitId of the resultant merge commit.",
            "type": "string"
          }
        }
      },
      "GitMergeOriginRef": {
        "description": "",
        "type": "object",
        "properties": {
          "cherryPickId": {
            "type": "integer",
            "format": "int32"
          },
          "pullRequestId": {
            "type": "integer",
            "format": "int32"
          },
          "revertId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GitMergeParameters": {
        "description": "Parameters required for performing git merge.",
        "type": "object",
        "properties": {
          "comment": {
            "description": "Comment or message of the commit.",
            "type": "string"
          },
          "parents": {
            "description": "An enumeration of the parent commit IDs for the merge  commit.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GitObject": {
        "description": "Git object identifier and type information.",
        "type": "object",
        "properties": {
          "objectId": {
            "description": "Object Id (Sha1Id).",
            "type": "string"
          },
          "objectType": {
            "description": "Type of object (Commit, Tree, Blob, Tag)",
            "enum": [
              "bad",
              "commit",
              "tree",
              "blob",
              "tag",
              "ext2",
              "ofsDelta",
              "refDelta"
            ],
            "x-ms-enum": {
              "name": "GitObjectType",
              "values": [
                {
                  "value": "bad",
                  "description": ""
                },
                {
                  "value": "commit",
                  "description": ""
                },
                {
                  "value": "tree",
                  "description": ""
                },
                {
                  "value": "blob",
                  "description": ""
                },
                {
                  "value": "tag",
                  "description": ""
                },
                {
                  "value": "ext2",
                  "description": ""
                },
                {
                  "value": "ofsDelta",
                  "description": ""
                },
                {
                  "value": "refDelta",
                  "description": ""
                }
              ]
            }
          }
        }
      },
      "GitPathAction": {
        "description": "",
        "type": "object",
        "properties": {
          "action": {
            "enum": [
              "none",
              "edit",
              "delete",
              "add",
              "rename"
            ],
            "x-ms-enum": {
              "name": "GitPathActions",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "edit",
                  "description": ""
                },
                {
                  "value": "delete",
                  "description": ""
                },
                {
                  "value": "add",
                  "description": ""
                },
                {
                  "value": "rename",
                  "description": ""
                }
              ]
            }
          },
          "base64Content": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "rawTextContent": {
            "type": "string"
          },
          "targetPath": {
            "type": "string"
          }
        }
      },
      "GitPathToItemsCollection": {
        "description": "",
        "type": "object",
        "properties": {
          "items": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GitItem"
              }
            }
          }
        }
      },
      "GitPolicyConfigurationResponse": {
        "description": "",
        "type": "object",
        "properties": {
          "continuationToken": {
            "description": "The HTTP client methods find the continuation token header in the response and populate this field.",
            "type": "string"
          },
          "policyConfigurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyConfiguration"
            }
          }
        }
      },
      "GitPullRequest": {
        "description": "Represents all the data associated with a pull request.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "artifactId": {
            "description": "A string which uniquely identifies this pull request. To generate an artifact ID for a pull request, use this template: ```vstfs:///Git/PullRequestId/{projectId}/{repositoryId}/{pullRequestId}```",
            "type": "string"
          },
          "autoCompleteSetBy": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "closedBy": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "closedDate": {
            "description": "The date when the pull request was closed (completed, abandoned, or merged externally).",
            "type": "string",
            "format": "date-time"
          },
          "codeReviewId": {
            "description": "The code review ID of the pull request. Used internally.",
            "type": "integer",
            "format": "int32"
          },
          "commits": {
            "description": "The commits contained in the pull request.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitCommitRef"
            }
          },
          "completionOptions": {
            "$ref": "#/components/schemas/GitPullRequestCompletionOptions"
          },
          "completionQueueTime": {
            "description": "The most recent date at which the pull request entered the queue to be completed. Used internally.",
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "creationDate": {
            "description": "The date when the pull request was created.",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "The description of the pull request.",
            "type": "string"
          },
          "forkSource": {
            "$ref": "#/components/schemas/GitForkRef"
          },
          "hasMultipleMergeBases": {
            "description": "Multiple mergebases warning",
            "type": "boolean"
          },
          "isDraft": {
            "description": "Draft / WIP pull request.",
            "type": "boolean"
          },
          "labels": {
            "description": "The labels associated with the pull request.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebApiTagDefinition"
            }
          },
          "lastMergeCommit": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "lastMergeSourceCommit": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "lastMergeTargetCommit": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "mergeFailureMessage": {
            "description": "If set, pull request merge failed for this reason.",
            "type": "string"
          },
          "mergeFailureType": {
            "description": "The type of failure (if any) of the pull request merge.",
            "enum": [
              "none",
              "unknown",
              "caseSensitive",
              "objectTooLarge"
            ],
            "x-ms-enum": {
              "name": "PullRequestMergeFailureType",
              "values": [
                {
                  "value": "none",
                  "description": "Type is not set. Default type."
                },
                {
                  "value": "unknown",
                  "description": "Pull request merge failure type unknown."
                },
                {
                  "value": "caseSensitive",
                  "description": "Pull request merge failed due to case mismatch."
                },
                {
                  "value": "objectTooLarge",
                  "description": "Pull request merge failed due to an object being too large."
                }
              ]
            }
          },
          "mergeId": {
            "description": "The ID of the job used to run the pull request merge. Used internally.",
            "type": "string",
            "format": "uuid"
          },
          "mergeOptions": {
            "$ref": "#/components/schemas/GitPullRequestMergeOptions"
          },
          "mergeStatus": {
            "description": "The current status of the pull request merge.",
            "enum": [
              "notSet",
              "queued",
              "conflicts",
              "succeeded",
              "rejectedByPolicy",
              "failure"
            ],
            "x-ms-enum": {
              "name": "PullRequestAsyncStatus",
              "values": [
                {
                  "value": "notSet",
                  "description": "Status is not set. Default state."
                },
                {
                  "value": "queued",
                  "description": "Pull request merge is queued."
                },
                {
                  "value": "conflicts",
                  "description": "Pull request merge failed due to conflicts."
                },
                {
                  "value": "succeeded",
                  "description": "Pull request merge succeeded."
                },
                {
                  "value": "rejectedByPolicy",
                  "description": "Pull request merge rejected by policy."
                },
                {
                  "value": "failure",
                  "description": "Pull request merge failed."
                }
              ]
            }
          },
          "pullRequestId": {
            "description": "The ID of the pull request.",
            "type": "integer",
            "format": "int32"
          },
          "remoteUrl": {
            "description": "Used internally.",
            "type": "string"
          },
          "repository": {
            "$ref": "#/components/schemas/GitRepository"
          },
          "reviewers": {
            "description": "A list of reviewers on the pull request along with the state of their votes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityRefWithVote"
            }
          },
          "sourceRefName": {
            "description": "The name of the source branch of the pull request.",
            "type": "string"
          },
          "status": {
            "description": "The status of the pull request.",
            "enum": [
              "notSet",
              "active",
              "abandoned",
              "completed",
              "all"
            ],
            "x-ms-enum": {
              "name": "PullRequestStatus",
              "values": [
                {
                  "value": "notSet",
                  "description": "Status not set. Default state."
                },
                {
                  "value": "active",
                  "description": "Pull request is active."
                },
                {
                  "value": "abandoned",
                  "description": "Pull request is abandoned."
                },
                {
                  "value": "completed",
                  "description": "Pull request is completed."
                },
                {
                  "value": "all",
                  "description": "Used in pull request search criteria to include all statuses."
                }
              ]
            }
          },
          "supportsIterations": {
            "description": "If true, this pull request supports multiple iterations. Iteration support means individual pushes to the source branch of the pull request can be reviewed and comments left in one iteration will be tracked across future iterations.",
            "type": "boolean"
          },
          "targetRefName": {
            "description": "The name of the target branch of the pull request.",
            "type": "string"
          },
          "title": {
            "description": "The title of the pull request.",
            "type": "string"
          },
          "url": {
            "description": "Used internally.",
            "type": "string"
          },
          "workItemRefs": {
            "description": "Any work item references associated with this pull request.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceRef"
            }
          }
        }
      },
      "GitPullRequestChange": {
        "description": "Change made in a pull request.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitChange"
          }
        ],
        "properties": {
          "changeTrackingId": {
            "description": "ID used to track files through multiple changes.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GitPullRequestCommentThread": {
        "description": "Represents a comment thread of a pull request. A thread contains meta data about the file it was left on (if any) along with one or more comments (an initial comment and the subsequent replies).",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CommentThread"
          }
        ],
        "properties": {
          "pullRequestThreadContext": {
            "$ref": "#/components/schemas/GitPullRequestCommentThreadContext"
          }
        }
      },
      "GitPullRequestCommentThreadContext": {
        "description": "Comment thread context contains details about what diffs were being viewed at the time of thread creation and whether or not the thread has been tracked from that original diff.",
        "type": "object",
        "properties": {
          "changeTrackingId": {
            "description": "Used to track a comment across iterations. This value can be found by looking at the iteration's changes list. Must be set for pull requests with iteration support. Otherwise, it's not required for 'legacy' pull requests.",
            "type": "integer",
            "format": "int32"
          },
          "iterationContext": {
            "$ref": "#/components/schemas/CommentIterationContext"
          },
          "trackingCriteria": {
            "$ref": "#/components/schemas/CommentTrackingCriteria"
          }
        }
      },
      "GitPullRequestCompletionOptions": {
        "description": "Preferences about how the pull request should be completed.",
        "type": "object",
        "properties": {
          "autoCompleteIgnoreConfigIds": {
            "description": "List of any policy configuration Id's which auto-complete should not wait for. Only applies to optional policies (isBlocking == false). Auto-complete always waits for required policies (isBlocking == true).",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "bypassPolicy": {
            "description": "If true, policies will be explicitly bypassed while the pull request is completed.",
            "type": "boolean"
          },
          "bypassReason": {
            "description": "If policies are bypassed, this reason is stored as to why bypass was used.",
            "type": "string"
          },
          "deleteSourceBranch": {
            "description": "If true, the source branch of the pull request will be deleted after completion.",
            "type": "boolean"
          },
          "mergeCommitMessage": {
            "description": "If set, this will be used as the commit message of the merge commit.",
            "type": "string"
          },
          "mergeStrategy": {
            "description": "Specify the strategy used to merge the pull request during completion. If MergeStrategy is not set to any value, a no-FF merge will be created if SquashMerge == false. If MergeStrategy is not set to any value, the pull request commits will be squashed if SquashMerge == true. The SquashMerge property is deprecated. It is recommended that you explicitly set MergeStrategy in all cases. If an explicit value is provided for MergeStrategy, the SquashMerge property will be ignored.",
            "enum": [
              "noFastForward",
              "squash",
              "rebase",
              "rebaseMerge"
            ],
            "x-ms-enum": {
              "name": "GitPullRequestMergeStrategy",
              "values": [
                {
                  "value": "noFastForward",
                  "description": "A two-parent, no-fast-forward merge. The source branch is unchanged. This is the default behavior."
                },
                {
                  "value": "squash",
                  "description": "Put all changes from the pull request into a single-parent commit."
                },
                {
                  "value": "rebase",
                  "description": "Rebase the source branch on top of the target branch HEAD commit, and fast-forward the target branch. The source branch is updated during the rebase operation."
                },
                {
                  "value": "rebaseMerge",
                  "description": "Rebase the source branch on top of the target branch HEAD commit, and create a two-parent, no-fast-forward merge. The source branch is updated during the rebase operation."
                }
              ]
            }
          },
          "squashMerge": {
            "description": "SquashMerge is deprecated. You should explicitly set the value of MergeStrategy. If MergeStrategy is set to any value, the SquashMerge value will be ignored. If MergeStrategy is not set, the merge strategy will be no-fast-forward if this flag is false, or squash if true.",
            "type": "boolean"
          },
          "transitionWorkItems": {
            "description": "If true, we will attempt to transition any work items linked to the pull request into the next logical state (i.e. Active -> Resolved)",
            "type": "boolean"
          },
          "triggeredByAutoComplete": {
            "description": "If true, the current completion attempt was triggered via auto-complete. Used internally.",
            "type": "boolean"
          }
        }
      },
      "GitPullRequestIteration": {
        "description": "Provides properties that describe a Git pull request iteration. Iterations are created as a result of creating and pushing updates to a pull request.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "author": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "changeList": {
            "description": "Changes included with the pull request iteration.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitPullRequestChange"
            }
          },
          "commits": {
            "description": "The commits included with the pull request iteration.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitCommitRef"
            }
          },
          "commonRefCommit": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "createdDate": {
            "description": "The creation date of the pull request iteration.",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "Description of the pull request iteration.",
            "type": "string"
          },
          "hasMoreCommits": {
            "description": "Indicates if the Commits property contains a truncated list of commits in this pull request iteration.",
            "type": "boolean"
          },
          "id": {
            "description": "ID of the pull request iteration. Iterations are created as a result of creating and pushing updates to a pull request.",
            "type": "integer",
            "format": "int32"
          },
          "newTargetRefName": {
            "description": "If the iteration reason is Retarget, this is the refName of the new target",
            "type": "string"
          },
          "oldTargetRefName": {
            "description": "If the iteration reason is Retarget, this is the original target refName",
            "type": "string"
          },
          "push": {
            "$ref": "#/components/schemas/GitPushRef"
          },
          "reason": {
            "description": "The reason for which the pull request iteration was created.",
            "enum": [
              "push",
              "forcePush",
              "create",
              "rebase",
              "unknown",
              "retarget",
              "resolveConflicts"
            ],
            "x-ms-enum": {
              "name": "IterationReason",
              "values": [
                {
                  "value": "push",
                  "description": ""
                },
                {
                  "value": "forcePush",
                  "description": ""
                },
                {
                  "value": "create",
                  "description": ""
                },
                {
                  "value": "rebase",
                  "description": ""
                },
                {
                  "value": "unknown",
                  "description": ""
                },
                {
                  "value": "retarget",
                  "description": ""
                },
                {
                  "value": "resolveConflicts",
                  "description": ""
                }
              ]
            }
          },
          "sourceRefCommit": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "targetRefCommit": {
            "$ref": "#/components/schemas/GitCommitRef"
          },
          "updatedDate": {
            "description": "The updated date of the pull request iteration.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GitPullRequestIterationChanges": {
        "description": "Collection of changes made in a pull request.",
        "type": "object",
        "properties": {
          "changeEntries": {
            "description": "Changes made in the iteration.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitPullRequestChange"
            }
          },
          "nextSkip": {
            "description": "Value to specify as skip to get the next page of changes.  This will be zero if there are no more changes.",
            "type": "integer",
            "format": "int32"
          },
          "nextTop": {
            "description": "Value to specify as top to get the next page of changes.  This will be zero if there are no more changes.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GitPullRequestMergeOptions": {
        "description": "The options which are used when a pull request merge is created.",
        "type": "object",
        "properties": {
          "conflictAuthorshipCommits": {
            "description": "If true, conflict resolutions applied during the merge will be put in separate commits to preserve authorship info for git blame, etc.",
            "type": "boolean"
          },
          "detectRenameFalsePositives": {
            "type": "boolean"
          },
          "disableRenames": {
            "description": "If true, rename detection will not be performed during the merge.",
            "type": "boolean"
          }
        }
      },
      "GitPullRequestQuery": {
        "description": "A set of pull request queries and their results.",
        "type": "object",
        "properties": {
          "queries": {
            "description": "The queries to perform.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitPullRequestQueryInput"
            }
          },
          "results": {
            "description": "The results of the queries. This matches the QueryInputs list so Results[n] are the results of QueryInputs[n]. Each entry in the list is a dictionary of commit->pull requests.",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/GitPullRequest"
                }
              }
            }
          }
        }
      },
      "GitPullRequestQueryInput": {
        "description": "Pull request query input parameters.",
        "type": "object",
        "properties": {
          "items": {
            "description": "The list of commit IDs to search for.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "description": "The type of query to perform.",
            "enum": [
              "notSet",
              "lastMergeCommit",
              "commit"
            ],
            "x-ms-enum": {
              "name": "GitPullRequestQueryType",
              "values": [
                {
                  "value": "notSet",
                  "description": "No query type set."
                },
                {
                  "value": "lastMergeCommit",
                  "description": "Search for pull requests that created the supplied merge commits."
                },
                {
                  "value": "commit",
                  "description": "Search for pull requests that merged the supplied commits."
                }
              ]
            }
          }
        }
      },
      "GitPullRequestReviewFileContentInfo": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "path": {
            "description": "The file change path.",
            "type": "string"
          },
          "shA1Hash": {
            "description": "Content hash of on-disk representation of file content. Its calculated by the client by using SHA1 hash function. Ensure that uploaded file has same encoding as in source control.",
            "type": "string"
          }
        }
      },
      "GitPullRequestSearchCriteria": {
        "description": "Pull requests can be searched for matching this criteria.",
        "type": "object",
        "properties": {
          "creatorId": {
            "description": "If set, search for pull requests that were created by this identity.",
            "type": "string",
            "format": "uuid"
          },
          "includeLinks": {
            "description": "Whether to include the _links field on the shallow references",
            "type": "boolean"
          },
          "maxTime": {
            "description": "If specified, filters pull requests that created/closed before this date based on the queryTimeRangeType specified.",
            "type": "string",
            "format": "date-time"
          },
          "minTime": {
            "description": "If specified, filters pull requests that created/closed after this date based on the queryTimeRangeType specified.",
            "type": "string",
            "format": "date-time"
          },
          "queryTimeRangeType": {
            "description": "The type of time range which should be used for minTime and maxTime. Defaults to Created if unset.",
            "enum": [
              "created",
              "closed"
            ],
            "x-ms-enum": {
              "name": "PullRequestTimeRangeType",
              "values": [
                {
                  "value": "created",
                  "description": "The date when the pull request was created."
                },
                {
                  "value": "closed",
                  "description": "The date when the pull request was closed (completed, abandoned, or merged externally)."
                }
              ]
            }
          },
          "repositoryId": {
            "description": "If set, search for pull requests whose target branch is in this repository.",
            "type": "string",
            "format": "uuid"
          },
          "reviewerId": {
            "description": "If set, search for pull requests that have this identity as a reviewer.",
            "type": "string",
            "format": "uuid"
          },
          "sourceRefName": {
            "description": "If set, search for pull requests from this branch.",
            "type": "string"
          },
          "sourceRepositoryId": {
            "description": "If set, search for pull requests whose source branch is in this repository.",
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "description": "If set, search for pull requests that are in this state. Defaults to Active if unset.",
            "enum": [
              "notSet",
              "active",
              "abandoned",
              "completed",
              "all"
            ],
            "x-ms-enum": {
              "name": "PullRequestStatus",
              "values": [
                {
                  "value": "notSet",
                  "description": "Status not set. Default state."
                },
                {
                  "value": "active",
                  "description": "Pull request is active."
                },
                {
                  "value": "abandoned",
                  "description": "Pull request is abandoned."
                },
                {
                  "value": "completed",
                  "description": "Pull request is completed."
                },
                {
                  "value": "all",
                  "description": "Used in pull request search criteria to include all statuses."
                }
              ]
            }
          },
          "targetRefName": {
            "description": "If set, search for pull requests into this branch.",
            "type": "string"
          }
        }
      },
      "GitPullRequestStatus": {
        "description": "This class contains the metadata of a service/extension posting pull request status. Status can be associated with a pull request or an iteration.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitStatus"
          }
        ],
        "properties": {
          "iterationId": {
            "description": "ID of the iteration to associate status with. Minimum value is 1.",
            "type": "integer",
            "format": "int32"
          },
          "properties": {
            "$ref": "#/components/schemas/PropertiesCollection"
          }
        }
      },
      "GitPush": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitPushRef"
          }
        ],
        "properties": {
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitCommitRef"
            }
          },
          "refUpdates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitRefUpdate"
            }
          },
          "repository": {
            "$ref": "#/components/schemas/GitRepository"
          }
        }
      },
      "GitPushEventData": {
        "description": "",
        "type": "object",
        "properties": {
          "afterId": {
            "type": "string"
          },
          "beforeId": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "commits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitCommit"
            }
          },
          "repository": {
            "$ref": "#/components/schemas/GitRepository"
          }
        }
      },
      "GitPushRef": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "pushedBy": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "pushId": {
            "type": "integer",
            "format": "int32"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GitPushSearchCriteria": {
        "description": "",
        "type": "object",
        "properties": {
          "fromDate": {
            "type": "string",
            "format": "date-time"
          },
          "includeLinks": {
            "description": "Whether to include the _links field on the shallow references",
            "type": "boolean"
          },
          "includeRefUpdates": {
            "type": "boolean"
          },
          "pusherId": {
            "type": "string",
            "format": "uuid"
          },
          "refName": {
            "type": "string"
          },
          "toDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GitQueryBranchStatsCriteria": {
        "description": "",
        "type": "object",
        "properties": {
          "baseCommit": {
            "$ref": "#/components/schemas/GitVersionDescriptor"
          },
          "targetCommits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitVersionDescriptor"
            }
          }
        }
      },
      "GitQueryCommitsCriteria": {
        "description": "",
        "type": "object",
        "properties": {
          "$skip": {
            "description": "Number of entries to skip",
            "type": "integer",
            "format": "int32"
          },
          "$top": {
            "description": "Maximum number of entries to retrieve",
            "type": "integer",
            "format": "int32"
          },
          "author": {
            "description": "Alias or display name of the author",
            "type": "string"
          },
          "compareVersion": {
            "$ref": "#/components/schemas/GitVersionDescriptor"
          },
          "excludeDeletes": {
            "description": "Only applies when an itemPath is specified. This determines whether to exclude delete entries of the specified path.",
            "type": "boolean"
          },
          "fromCommitId": {
            "description": "If provided, a lower bound for filtering commits alphabetically",
            "type": "string"
          },
          "fromDate": {
            "description": "If provided, only include history entries created after this date (string)",
            "type": "string"
          },
          "historyMode": {
            "description": "What Git history mode should be used. This only applies to the search criteria when Ids = null and an itemPath is specified.",
            "enum": [
              "simplifiedHistory",
              "firstParent",
              "fullHistory",
              "fullHistorySimplifyMerges"
            ],
            "x-ms-enum": {
              "name": "GitHistoryMode",
              "values": [
                {
                  "value": "simplifiedHistory",
                  "description": "The history mode used by `git log`. This is the default."
                },
                {
                  "value": "firstParent",
                  "description": "The history mode used by `git log --first-parent`"
                },
                {
                  "value": "fullHistory",
                  "description": "The history mode used by `git log --full-history`"
                },
                {
                  "value": "fullHistorySimplifyMerges",
                  "description": "The history mode used by `git log --full-history --simplify-merges`"
                }
              ]
            }
          },
          "ids": {
            "description": "If provided, specifies the exact commit ids of the commits to fetch. May not be combined with other parameters.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "includeLinks": {
            "description": "Whether to include the _links field on the shallow references",
            "type": "boolean"
          },
          "includePushData": {
            "description": "Whether to include the push information",
            "type": "boolean"
          },
          "includeUserImageUrl": {
            "description": "Whether to include the image Url for committers and authors",
            "type": "boolean"
          },
          "includeWorkItems": {
            "description": "Whether to include linked work items",
            "type": "boolean"
          },
          "itemPath": {
            "description": "Path of item to search under",
            "type": "string"
          },
          "itemVersion": {
            "$ref": "#/components/schemas/GitVersionDescriptor"
          },
          "showOldestCommitsFirst": {
            "description": "If enabled, this option will ignore the itemVersion and compareVersion parameters",
            "type": "boolean"
          },
          "toCommitId": {
            "description": "If provided, an upper bound for filtering commits alphabetically",
            "type": "string"
          },
          "toDate": {
            "description": "If provided, only include history entries created before this date (string)",
            "type": "string"
          },
          "user": {
            "description": "Alias or display name of the committer",
            "type": "string"
          }
        }
      },
      "GitQueryRefsCriteria": {
        "description": "",
        "type": "object",
        "properties": {
          "commitIds": {
            "description": "List of commit Ids to be searched",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refNames": {
            "description": "List of complete or partial names for refs to be searched",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "searchType": {
            "description": "Type of search on refNames, if provided",
            "enum": [
              "exact",
              "startsWith",
              "contains"
            ],
            "x-ms-enum": {
              "name": "GitRefSearchType",
              "values": [
                {
                  "value": "exact",
                  "description": ""
                },
                {
                  "value": "startsWith",
                  "description": ""
                },
                {
                  "value": "contains",
                  "description": ""
                }
              ]
            }
          }
        }
      },
      "GitRecycleBinRepositoryDetails": {
        "description": "",
        "type": "object",
        "properties": {
          "deleted": {
            "description": "Setting to false will undo earlier deletion and restore the repository.",
            "type": "boolean"
          }
        }
      },
      "GitRef": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "creator": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "isLocked": {
            "type": "boolean"
          },
          "isLockedBy": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "name": {
            "type": "string"
          },
          "objectId": {
            "type": "string"
          },
          "peeledObjectId": {
            "type": "string"
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitStatus"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GitRefFavorite": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "identityId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "repositoryId": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "invalid",
              "folder",
              "ref"
            ],
            "x-ms-enum": {
              "name": "RefFavoriteType",
              "values": [
                {
                  "value": "invalid",
                  "description": ""
                },
                {
                  "value": "folder",
                  "description": ""
                },
                {
                  "value": "ref",
                  "description": ""
                }
              ]
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GitRefUpdate": {
        "description": "",
        "type": "object",
        "properties": {
          "isLocked": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "newObjectId": {
            "type": "string"
          },
          "oldObjectId": {
            "type": "string"
          },
          "repositoryId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "GitRefUpdateResult": {
        "description": "",
        "type": "object",
        "properties": {
          "customMessage": {
            "description": "Custom message for the result object For instance, Reason for failing.",
            "type": "string"
          },
          "isLocked": {
            "description": "Whether the ref is locked or not",
            "type": "boolean"
          },
          "name": {
            "description": "Ref name",
            "type": "string"
          },
          "newObjectId": {
            "description": "New object ID",
            "type": "string"
          },
          "oldObjectId": {
            "description": "Old object ID",
            "type": "string"
          },
          "rejectedBy": {
            "description": "Name of the plugin that rejected the updated.",
            "type": "string"
          },
          "repositoryId": {
            "description": "Repository ID",
            "type": "string",
            "format": "uuid"
          },
          "success": {
            "description": "True if the ref update succeeded, false otherwise",
            "type": "boolean"
          },
          "updateStatus": {
            "description": "Status of the update from the TFS server.",
            "enum": [
              "succeeded",
              "forcePushRequired",
              "staleOldObjectId",
              "invalidRefName",
              "unprocessed",
              "unresolvableToCommit",
              "writePermissionRequired",
              "manageNotePermissionRequired",
              "createBranchPermissionRequired",
              "createTagPermissionRequired",
              "rejectedByPlugin",
              "locked",
              "refNameConflict",
              "rejectedByPolicy",
              "succeededNonExistentRef",
              "succeededCorruptRef"
            ],
            "x-ms-enum": {
              "name": "GitRefUpdateStatus",
              "values": [
                {
                  "value": "succeeded",
                  "description": "Indicates that the ref update request was completed successfully."
                },
                {
                  "value": "forcePushRequired",
                  "description": "Indicates that the ref update request could not be completed because part of the graph would be disconnected by this change, and the caller does not have ForcePush permission on the repository."
                },
                {
                  "value": "staleOldObjectId",
                  "description": "Indicates that the ref update request could not be completed because the old object ID presented in the request was not the object ID of the ref when the database attempted the update. The most likely scenario is that the caller lost a race to update the ref."
                },
                {
                  "value": "invalidRefName",
                  "description": "Indicates that the ref update request could not be completed because the ref name presented in the request was not valid."
                },
                {
                  "value": "unprocessed",
                  "description": "The request was not processed"
                },
                {
                  "value": "unresolvableToCommit",
                  "description": "The ref update request could not be completed because the new object ID for the ref could not be resolved to a commit object (potentially through any number of tags)"
                },
                {
                  "value": "writePermissionRequired",
                  "description": "The ref update request could not be completed because the user lacks write permissions required to write this ref"
                },
                {
                  "value": "manageNotePermissionRequired",
                  "description": "The ref update request could not be completed because the user lacks note creation permissions required to write this note"
                },
                {
                  "value": "createBranchPermissionRequired",
                  "description": "The ref update request could not be completed because the user lacks the permission to create a branch"
                },
                {
                  "value": "createTagPermissionRequired",
                  "description": "The ref update request could not be completed because the user lacks the permission to create a tag"
                },
                {
                  "value": "rejectedByPlugin",
                  "description": "The ref update could not be completed because it was rejected by the plugin."
                },
                {
                  "value": "locked",
                  "description": "The ref update could not be completed because the ref is locked by another user."
                },
                {
                  "value": "refNameConflict",
                  "description": "The ref update could not be completed because, in case-insensitive mode, the ref name conflicts with an existing, differently-cased ref name."
                },
                {
                  "value": "rejectedByPolicy",
                  "description": "The ref update could not be completed because it was rejected by policy."
                },
                {
                  "value": "succeededNonExistentRef",
                  "description": "Indicates that the ref update request was completed successfully, but the ref doesn't actually exist so no changes were made.  This should only happen during deletes."
                },
                {
                  "value": "succeededCorruptRef",
                  "description": "Indicates that the ref update request was completed successfully, but the passed-in ref was corrupt - as in, the old object ID was bad.  This should only happen during deletes."
                }
              ]
            }
          }
        }
      },
      "GitRepository": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "defaultBranch": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "isDisabled": {
            "description": "True if the repository is disabled. False otherwise.",
            "type": "boolean"
          },
          "isFork": {
            "description": "True if the repository was created as a fork.",
            "type": "boolean"
          },
          "isInMaintenance": {
            "description": "True if the repository is in maintenance. False otherwise.",
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "parentRepository": {
            "$ref": "#/components/schemas/GitRepositoryRef"
          },
          "project": {
            "$ref": "#/components/schemas/TeamProjectReference"
          },
          "remoteUrl": {
            "type": "string"
          },
          "size": {
            "description": "Compressed size (bytes) of the repository.",
            "type": "integer",
            "format": "int64"
          },
          "sshUrl": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "validRemoteUrls": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "webUrl": {
            "type": "string"
          }
        }
      },
      "GitRepositoryCreateOptions": {
        "description": "",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "parentRepository": {
            "$ref": "#/components/schemas/GitRepositoryRef"
          },
          "project": {
            "$ref": "#/components/schemas/TeamProjectReference"
          }
        }
      },
      "GitRepositoryRef": {
        "description": "",
        "type": "object",
        "properties": {
          "collection": {
            "$ref": "#/components/schemas/TeamProjectCollectionReference"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "isFork": {
            "description": "True if the repository was created as a fork",
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "project": {
            "$ref": "#/components/schemas/TeamProjectReference"
          },
          "remoteUrl": {
            "type": "string"
          },
          "sshUrl": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "GitRepositoryStats": {
        "description": "",
        "type": "object",
        "properties": {
          "activePullRequestsCount": {
            "type": "integer",
            "format": "int32"
          },
          "branchesCount": {
            "type": "integer",
            "format": "int32"
          },
          "commitsCount": {
            "type": "integer",
            "format": "int32"
          },
          "repositoryId": {
            "type": "string"
          }
        }
      },
      "GitResolution": {
        "description": "",
        "type": "object",
        "properties": {
          "author": {
            "$ref": "#/components/schemas/IdentityRef"
          }
        }
      },
      "GitResolutionMergeContent": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitResolution"
          }
        ],
        "properties": {
          "mergeType": {
            "enum": [
              "undecided",
              "takeSourceContent",
              "takeTargetContent",
              "autoMerged",
              "userMerged"
            ],
            "x-ms-enum": {
              "name": "GitResolutionMergeType",
              "values": [
                {
                  "value": "undecided",
                  "description": ""
                },
                {
                  "value": "takeSourceContent",
                  "description": ""
                },
                {
                  "value": "takeTargetContent",
                  "description": ""
                },
                {
                  "value": "autoMerged",
                  "description": ""
                },
                {
                  "value": "userMerged",
                  "description": ""
                }
              ]
            }
          },
          "userMergedBlob": {
            "$ref": "#/components/schemas/GitBlobRef"
          },
          "userMergedContent": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      },
      "GitResolutionPathConflict": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitResolution"
          }
        ],
        "properties": {
          "action": {
            "enum": [
              "undecided",
              "keepSourceRenameTarget",
              "keepSourceDeleteTarget",
              "keepTargetRenameSource",
              "keepTargetDeleteSource"
            ],
            "x-ms-enum": {
              "name": "GitResolutionPathConflictAction",
              "values": [
                {
                  "value": "undecided",
                  "description": ""
                },
                {
                  "value": "keepSourceRenameTarget",
                  "description": ""
                },
                {
                  "value": "keepSourceDeleteTarget",
                  "description": ""
                },
                {
                  "value": "keepTargetRenameSource",
                  "description": ""
                },
                {
                  "value": "keepTargetDeleteSource",
                  "description": ""
                }
              ]
            }
          },
          "renamePath": {
            "type": "string"
          }
        }
      },
      "GitResolutionPickOneAction": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitResolution"
          }
        ],
        "properties": {
          "action": {
            "enum": [
              "undecided",
              "pickSourceAction",
              "pickTargetAction"
            ],
            "x-ms-enum": {
              "name": "GitResolutionWhichAction",
              "values": [
                {
                  "value": "undecided",
                  "description": ""
                },
                {
                  "value": "pickSourceAction",
                  "description": ""
                },
                {
                  "value": "pickTargetAction",
                  "description": ""
                }
              ]
            }
          }
        }
      },
      "GitResolutionRename1to2": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitResolutionMergeContent"
          }
        ],
        "properties": {
          "action": {
            "enum": [
              "undecided",
              "keepSourcePath",
              "keepTargetPath",
              "keepBothFiles"
            ],
            "x-ms-enum": {
              "name": "GitResolutionRename1to2Action",
              "values": [
                {
                  "value": "undecided",
                  "description": ""
                },
                {
                  "value": "keepSourcePath",
                  "description": ""
                },
                {
                  "value": "keepTargetPath",
                  "description": ""
                },
                {
                  "value": "keepBothFiles",
                  "description": ""
                }
              ]
            }
          }
        }
      },
      "GitRevert": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitAsyncRefOperation"
          }
        ],
        "properties": {
          "revertId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "GitStatus": {
        "description": "This class contains the metadata of a service/extension posting a status.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "context": {
            "$ref": "#/components/schemas/GitStatusContext"
          },
          "createdBy": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "creationDate": {
            "description": "Creation date and time of the status.",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "Status description. Typically describes current state of the status.",
            "type": "string"
          },
          "id": {
            "description": "Status identifier.",
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "description": "State of the status.",
            "enum": [
              "notSet",
              "pending",
              "succeeded",
              "failed",
              "error",
              "notApplicable"
            ],
            "x-ms-enum": {
              "name": "GitStatusState",
              "values": [
                {
                  "value": "notSet",
                  "description": "Status state not set. Default state."
                },
                {
                  "value": "pending",
                  "description": "Status pending."
                },
                {
                  "value": "succeeded",
                  "description": "Status succeeded."
                },
                {
                  "value": "failed",
                  "description": "Status failed."
                },
                {
                  "value": "error",
                  "description": "Status with an error."
                },
                {
                  "value": "notApplicable",
                  "description": "Status is not applicable to the target object."
                }
              ]
            }
          },
          "targetUrl": {
            "description": "URL with status details.",
            "type": "string"
          },
          "updatedDate": {
            "description": "Last update date and time of the status.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "GitStatusContext": {
        "description": "Status context that uniquely identifies the status.",
        "type": "object",
        "properties": {
          "genre": {
            "description": "Genre of the status. Typically name of the service/tool generating the status, can be empty.",
            "type": "string"
          },
          "name": {
            "description": "Name identifier of the status, cannot be null or empty.",
            "type": "string"
          }
        }
      },
      "GitSuggestion": {
        "description": "An object describing the git suggestion.  Git suggestions are currently limited to suggested pull requests.",
        "type": "object",
        "properties": {
          "properties": {
            "description": "Specific properties describing the suggestion.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "type": {
            "description": "The type of suggestion (e.g. pull request).",
            "type": "string"
          }
        }
      },
      "GitTargetVersionDescriptor": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GitVersionDescriptor"
          }
        ],
        "properties": {
          "targetVersion": {
            "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
            "type": "string"
          },
          "targetVersionOptions": {
            "description": "Version options - Specify additional modifiers to version (e.g Previous)",
            "enum": [
              "none",
              "previousChange",
              "firstParent"
            ],
            "x-ms-enum": {
              "name": "GitVersionOptions",
              "values": [
                {
                  "value": "none",
                  "description": "Not specified"
                },
                {
                  "value": "previousChange",
                  "description": "Commit that changed item prior to the current version"
                },
                {
                  "value": "firstParent",
                  "description": "First parent of commit (HEAD^)"
                }
              ]
            }
          },
          "targetVersionType": {
            "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
            "enum": [
              "branch",
              "tag",
              "commit"
            ],
            "x-ms-enum": {
              "name": "GitVersionType",
              "values": [
                {
                  "value": "branch",
                  "description": "Interpret the version as a branch name"
                },
                {
                  "value": "tag",
                  "description": "Interpret the version as a tag name"
                },
                {
                  "value": "commit",
                  "description": "Interpret the version as a commit ID (SHA1)"
                }
              ]
            }
          }
        }
      },
      "GitTemplate": {
        "description": "",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the Template",
            "type": "string"
          },
          "type": {
            "description": "Type of the Template",
            "type": "string"
          }
        }
      },
      "GitTreeDiff": {
        "description": "",
        "type": "object",
        "properties": {
          "baseTreeId": {
            "description": "ObjectId of the base tree of this diff.",
            "type": "string"
          },
          "diffEntries": {
            "description": "List of tree entries that differ between the base and target tree.  Renames and object type changes are returned as a delete for the old object and add for the new object.  If a continuation token is returned in the response header, some tree entries are yet to be processed and may yield more diff entries. If the continuation token is not returned all the diff entries have been included in this response.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitTreeDiffEntry"
            }
          },
          "targetTreeId": {
            "description": "ObjectId of the target tree of this diff.",
            "type": "string"
          },
          "url": {
            "description": "REST Url to this resource.",
            "type": "string"
          }
        }
      },
      "GitTreeDiffEntry": {
        "description": "",
        "type": "object",
        "properties": {
          "baseObjectId": {
            "description": "SHA1 hash of the object in the base tree, if it exists. Will be null in case of adds.",
            "type": "string"
          },
          "changeType": {
            "description": "Type of change that affected this entry.",
            "enum": [
              "none",
              "add",
              "edit",
              "encoding",
              "rename",
              "delete",
              "undelete",
              "branch",
              "merge",
              "lock",
              "rollback",
              "sourceRename",
              "targetRename",
              "property",
              "all"
            ],
            "x-ms-enum": {
              "name": "VersionControlChangeType",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "add",
                  "description": ""
                },
                {
                  "value": "edit",
                  "description": ""
                },
                {
                  "value": "encoding",
                  "description": ""
                },
                {
                  "value": "rename",
                  "description": ""
                },
                {
                  "value": "delete",
                  "description": ""
                },
                {
                  "value": "undelete",
                  "description": ""
                },
                {
                  "value": "branch",
                  "description": ""
                },
                {
                  "value": "merge",
                  "description": ""
                },
                {
                  "value": "lock",
                  "description": ""
                },
                {
                  "value": "rollback",
                  "description": ""
                },
                {
                  "value": "sourceRename",
                  "description": ""
                },
                {
                  "value": "targetRename",
                  "description": ""
                },
                {
                  "value": "property",
                  "description": ""
                },
                {
                  "value": "all",
                  "description": ""
                }
              ]
            }
          },
          "objectType": {
            "description": "Object type of the tree entry. Blob, Tree or Commit(\"submodule\")",
            "enum": [
              "bad",
              "commit",
              "tree",
              "blob",
              "tag",
              "ext2",
              "ofsDelta",
              "refDelta"
            ],
            "x-ms-enum": {
              "name": "GitObjectType",
              "values": [
                {
                  "value": "bad",
                  "description": ""
                },
                {
                  "value": "commit",
                  "description": ""
                },
                {
                  "value": "tree",
                  "description": ""
                },
                {
                  "value": "blob",
                  "description": ""
                },
                {
                  "value": "tag",
                  "description": ""
                },
                {
                  "value": "ext2",
                  "description": ""
                },
                {
                  "value": "ofsDelta",
                  "description": ""
                },
                {
                  "value": "refDelta",
                  "description": ""
                }
              ]
            }
          },
          "path": {
            "description": "Relative path in base and target trees.",
            "type": "string"
          },
          "targetObjectId": {
            "description": "SHA1 hash of the object in the target tree, if it exists. Will be null in case of deletes.",
            "type": "string"
          }
        }
      },
      "GitTreeDiffResponse": {
        "description": "",
        "type": "object",
        "properties": {
          "continuationToken": {
            "description": "The HTTP client methods find the continuation token header in the response and populate this field.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "treeDiff": {
            "$ref": "#/components/schemas/GitTreeDiff"
          }
        }
      },
      "GitTreeEntryRef": {
        "description": "",
        "type": "object",
        "properties": {
          "gitObjectType": {
            "description": "Blob or tree",
            "enum": [
              "bad",
              "commit",
              "tree",
              "blob",
              "tag",
              "ext2",
              "ofsDelta",
              "refDelta"
            ],
            "x-ms-enum": {
              "name": "GitObjectType",
              "values": [
                {
                  "value": "bad",
                  "description": ""
                },
                {
                  "value": "commit",
                  "description": ""
                },
                {
                  "value": "tree",
                  "description": ""
                },
                {
                  "value": "blob",
                  "description": ""
                },
                {
                  "value": "tag",
                  "description": ""
                },
                {
                  "value": "ext2",
                  "description": ""
                },
                {
                  "value": "ofsDelta",
                  "description": ""
                },
                {
                  "value": "refDelta",
                  "description": ""
                }
              ]
            }
          },
          "mode": {
            "description": "Mode represented as octal string",
            "type": "string"
          },
          "objectId": {
            "description": "SHA1 hash of git object",
            "type": "string"
          },
          "relativePath": {
            "description": "Path relative to parent tree object",
            "type": "string"
          },
          "size": {
            "description": "Size of content",
            "type": "integer",
            "format": "int64"
          },
          "url": {
            "description": "url to retrieve tree or blob",
            "type": "string"
          }
        }
      },
      "GitTreeRef": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "objectId": {
            "description": "SHA1 hash of git object",
            "type": "string"
          },
          "size": {
            "description": "Sum of sizes of all children",
            "type": "integer",
            "format": "int64"
          },
          "treeEntries": {
            "description": "Blobs and trees under this tree",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitTreeEntryRef"
            }
          },
          "url": {
            "description": "Url to tree",
            "type": "string"
          }
        }
      },
      "GitUserDate": {
        "description": "User info and date for Git operations.",
        "type": "object",
        "properties": {
          "date": {
            "description": "Date of the Git operation.",
            "type": "string",
            "format": "date-time"
          },
          "email": {
            "description": "Email address of the user performing the Git operation.",
            "type": "string"
          },
          "imageUrl": {
            "description": "Url for the user's avatar.",
            "type": "string"
          },
          "name": {
            "description": "Name of the user performing the Git operation.",
            "type": "string"
          }
        }
      },
      "GitVersionDescriptor": {
        "description": "",
        "type": "object",
        "properties": {
          "version": {
            "description": "Version string identifier (name of tag/branch, SHA1 of commit)",
            "type": "string"
          },
          "versionOptions": {
            "description": "Version options - Specify additional modifiers to version (e.g Previous)",
            "enum": [
              "none",
              "previousChange",
              "firstParent"
            ],
            "x-ms-enum": {
              "name": "GitVersionOptions",
              "values": [
                {
                  "value": "none",
                  "description": "Not specified"
                },
                {
                  "value": "previousChange",
                  "description": "Commit that changed item prior to the current version"
                },
                {
                  "value": "firstParent",
                  "description": "First parent of commit (HEAD^)"
                }
              ]
            }
          },
          "versionType": {
            "description": "Version type (branch, tag, or commit). Determines how Id is interpreted",
            "enum": [
              "branch",
              "tag",
              "commit"
            ],
            "x-ms-enum": {
              "name": "GitVersionType",
              "values": [
                {
                  "value": "branch",
                  "description": "Interpret the version as a branch name"
                },
                {
                  "value": "tag",
                  "description": "Interpret the version as a tag name"
                },
                {
                  "value": "commit",
                  "description": "Interpret the version as a commit ID (SHA1)"
                }
              ]
            }
          }
        }
      },
      "GlobalGitRepositoryKey": {
        "description": "Globally unique key for a repository.",
        "type": "object",
        "properties": {
          "collectionId": {
            "description": "Team Project Collection ID of the collection for the repository.",
            "type": "string",
            "format": "uuid"
          },
          "projectId": {
            "description": "Team Project ID of the project for the repository.",
            "type": "string",
            "format": "uuid"
          },
          "repositoryId": {
            "description": "ID of the repository.",
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "GraphSubjectBase": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "descriptor": {
            "description": "The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.",
            "type": "string"
          },
          "displayName": {
            "description": "This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.",
            "type": "string"
          },
          "url": {
            "description": "This url is the full route to the source resource of this graph subject.",
            "type": "string"
          }
        }
      },
      "HistoryEntry": {
        "description": "",
        "type": "object",
        "properties": {
          "changeList": {
            "$ref": "#/components/schemas/ChangeList"
          },
          "itemChangeType": {
            "description": "The change made to the item from this change list (only relevant for File history, not folders)",
            "enum": [
              "none",
              "add",
              "edit",
              "encoding",
              "rename",
              "delete",
              "undelete",
              "branch",
              "merge",
              "lock",
              "rollback",
              "sourceRename",
              "targetRename",
              "property",
              "all"
            ],
            "x-ms-enum": {
              "name": "VersionControlChangeType",
              "values": [
                {
                  "value": "none",
                  "description": ""
                },
                {
                  "value": "add",
                  "description": ""
                },
                {
                  "value": "edit",
                  "description": ""
                },
                {
                  "value": "encoding",
                  "description": ""
                },
                {
                  "value": "rename",
                  "description": ""
                },
                {
                  "value": "delete",
                  "description": ""
                },
                {
                  "value": "undelete",
                  "description": ""
                },
                {
                  "value": "branch",
                  "description": ""
                },
                {
                  "value": "merge",
                  "description": ""
                },
                {
                  "value": "lock",
                  "description": ""
                },
                {
                  "value": "rollback",
                  "description": ""
                },
                {
                  "value": "sourceRename",
                  "description": ""
                },
                {
                  "value": "targetRename",
                  "description": ""
                },
                {
                  "value": "property",
                  "description": ""
                },
                {
                  "value": "all",
                  "description": ""
                }
              ]
            }
          },
          "serverItem": {
            "description": "The path of the item at this point in history (only relevant for File history, not folders)",
            "type": "string"
          }
        }
      },
      "IdentityRef": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/GraphSubjectBase"
          }
        ],
        "properties": {
          "directoryAlias": {
            "description": "Deprecated - Can be retrieved by querying the Graph user referenced in the \"self\" entry of the IdentityRef \"_links\" dictionary",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "imageUrl": {
            "description": "Deprecated - Available in the \"avatar\" entry of the IdentityRef \"_links\" dictionary",
            "type": "string"
          },
          "inactive": {
            "description": "Deprecated - Can be retrieved by querying the Graph membership state referenced in the \"membershipState\" entry of the GraphUser \"_links\" dictionary",
            "type": "boolean"
          },
          "isAadIdentity": {
            "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsAadUserType/Descriptor.IsAadGroupType)",
            "type": "boolean"
          },
          "isContainer": {
            "description": "Deprecated - Can be inferred from the subject type of the descriptor (Descriptor.IsGroupType)",
            "type": "boolean"
          },
          "isDeletedInOrigin": {
            "type": "boolean"
          },
          "profileUrl": {
            "description": "Deprecated - not in use in most preexisting implementations of ToIdentityRef",
            "type": "string"
          },
          "uniqueName": {
            "description": "Deprecated - use Domain+PrincipalName instead",
            "type": "string"
          }
        }
      },
      "IdentityRefWithVote": {
        "description": "Identity information including a vote on a pull request.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IdentityRef"
          }
        ],
        "properties": {
          "hasDeclined": {
            "description": "Indicates if this reviewer has declined to review this pull request.",
            "type": "boolean"
          },
          "isFlagged": {
            "description": "Indicates if this reviewer is flagged for attention on this pull request.",
            "type": "boolean"
          },
          "isReapprove": {
            "description": "Indicates if this approve vote should still be handled even though vote didn't change.",
            "type": "boolean"
          },
          "isRequired": {
            "description": "Indicates if this is a required reviewer for this pull request. <br /> Branches can have policies that require particular reviewers are required for pull requests.",
            "type": "boolean"
          },
          "reviewerUrl": {
            "description": "URL to retrieve information about this identity",
            "type": "string"
          },
          "vote": {
            "description": "Vote on a pull request:<br /> 10 - approved 5 - approved with suggestions 0 - no vote -5 - waiting for author -10 - rejected",
            "type": "integer",
            "format": "int16"
          },
          "votedFor": {
            "description": "Groups or teams that this reviewer contributed to. <br /> Groups and teams can be reviewers on pull requests but can not vote directly.  When a member of the group or team votes, that vote is rolled up into the group or team vote.  VotedFor is a list of such votes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityRefWithVote"
            }
          }
        }
      },
      "ImportRepositoryValidation": {
        "description": "",
        "type": "object",
        "properties": {
          "gitSource": {
            "$ref": "#/components/schemas/GitImportGitSource"
          },
          "password": {
            "type": "string"
          },
          "tfvcSource": {
            "$ref": "#/components/schemas/GitImportTfvcSource"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "IncludedGitCommit": {
        "description": "",
        "type": "object",
        "properties": {
          "commitId": {
            "type": "string"
          },
          "commitTime": {
            "type": "string",
            "format": "date-time"
          },
          "parentCommitIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "repositoryId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "IsDraftUpdatedEvent": {
        "description": "Real time event (SignalR) for IsDraft update on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "ItemContent": {
        "description": "",
        "type": "object",
        "properties": {
          "content": {
            "type": "string"
          },
          "contentType": {
            "enum": [
              "rawText",
              "base64Encoded"
            ],
            "x-ms-enum": {
              "name": "ItemContentType",
              "values": [
                {
                  "value": "rawText",
                  "description": ""
                },
                {
                  "value": "base64Encoded",
                  "description": ""
                }
              ]
            }
          }
        }
      },
      "ItemDetailsOptions": {
        "description": "Optional details to include when returning an item model",
        "type": "object",
        "properties": {
          "includeContentMetadata": {
            "description": "If true, include metadata about the file type",
            "type": "boolean"
          },
          "recursionLevel": {
            "description": "Specifies whether to include children (OneLevel), all descendants (Full) or None for folder items",
            "enum": [
              "none",
              "oneLevel",
              "oneLevelPlusNestedEmptyFolders",
              "full"
            ],
            "x-ms-enum": {
              "name": "VersionControlRecursionType",
              "values": [
                {
                  "value": "none",
                  "description": "Only return the specified item."
                },
                {
                  "value": "oneLevel",
                  "description": "Return the specified item and its direct children."
                },
                {
                  "value": "oneLevelPlusNestedEmptyFolders",
                  "description": "Return the specified item and its direct children, as well as recursive chains of nested child folders that only contain a single folder."
                },
                {
                  "value": "full",
                  "description": "Return specified item and all descendants"
                }
              ]
            }
          }
        }
      },
      "ItemModel": {
        "description": "",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "content": {
            "type": "string"
          },
          "contentMetadata": {
            "$ref": "#/components/schemas/FileContentMetadata"
          },
          "isFolder": {
            "type": "boolean"
          },
          "isSymLink": {
            "type": "boolean"
          },
          "path": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "JsonPatchDocument": {
        "description": "The JSON model for JSON Patch Operations",
        "type": "object",
        "allOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonPatchOperation"
            }
          }
        ],
        "properties": {}
      },
      "JsonPatchOperation": {
        "description": "The JSON model for a JSON Patch operation",
        "type": "object",
        "properties": {
          "from": {
            "description": "The path to copy from for the Move/Copy operation.",
            "type": "string"
          },
          "op": {
            "description": "The patch operation",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ],
            "x-ms-enum": {
              "name": "Operation",
              "values": [
                {
                  "value": "add",
                  "description": ""
                },
                {
                  "value": "remove",
                  "description": ""
                },
                {
                  "value": "replace",
                  "description": ""
                },
                {
                  "value": "move",
                  "description": ""
                },
                {
                  "value": "copy",
                  "description": ""
                },
                {
                  "value": "test",
                  "description": ""
                }
              ]
            }
          },
          "path": {
            "description": "The path for the operation. In the case of an array, a zero based index can be used to specify the position in the array (e.g. /biscuits/0/name). The \"-\" character can be used instead of an index to insert at the end of the array (e.g. /biscuits/-).",
            "type": "string"
          },
          "value": {
            "description": "The value for the operation. This is either a primitive or a JToken.",
            "type": "object"
          }
        }
      },
      "LabelsUpdatedEvent": {
        "description": "Real time event (SignalR) for updated labels on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "LineDiffBlock": {
        "description": "The class to represent the line diff block",
        "type": "object",
        "properties": {
          "changeType": {
            "description": "Type of change that was made to the block.",
            "enum": [
              "none",
              "add",
              "delete",
              "edit"
            ],
            "x-ms-enum": {
              "name": "LineDiffBlockChangeType",
              "values": [
                {
                  "value": "none",
                  "description": "No change - both the blocks are identical"
                },
                {
                  "value": "add",
                  "description": "Lines were added to the block in the modified file"
                },
                {
                  "value": "delete",
                  "description": "Lines were deleted from the block in the original file"
                },
                {
                  "value": "edit",
                  "description": "Lines were modified"
                }
              ]
            }
          },
          "modifiedLineNumberStart": {
            "description": "Line number where this block starts in modified file.",
            "type": "integer",
            "format": "int32"
          },
          "modifiedLinesCount": {
            "description": "Count of lines in this block in modified file.",
            "type": "integer",
            "format": "int32"
          },
          "originalLineNumberStart": {
            "description": "Line number where this block starts in original file.",
            "type": "integer",
            "format": "int32"
          },
          "originalLinesCount": {
            "description": "Count of lines in this block in original file.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MergeCompletedEvent": {
        "description": "Real time event (SignalR) for a merge completed on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "PolicyConfiguration": {
        "description": "The full policy configuration with settings.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/VersionedPolicyConfigurationRef"
          }
        ],
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "createdBy": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "createdDate": {
            "description": "The date and time when the policy was created.",
            "type": "string",
            "format": "date-time"
          },
          "isBlocking": {
            "description": "Indicates whether the policy is blocking.",
            "type": "boolean"
          },
          "isDeleted": {
            "description": "Indicates whether the policy has been (soft) deleted.",
            "type": "boolean"
          },
          "isEnabled": {
            "description": "Indicates whether the policy is enabled.",
            "type": "boolean"
          },
          "isEnterpriseManaged": {
            "description": "If set, this policy requires \"Manage Enterprise Policies\" permission to create, edit, or delete.",
            "type": "boolean"
          },
          "settings": {
            "description": "The policy configuration settings.",
            "type": "string",
            "format": "JObject"
          }
        }
      },
      "PolicyConfigurationRef": {
        "description": "Policy configuration reference.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The policy configuration ID.",
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/PolicyTypeRef"
          },
          "url": {
            "description": "The URL where the policy configuration can be retrieved.",
            "type": "string"
          }
        }
      },
      "PolicyEvaluationUpdatedEvent": {
        "description": "Real time event (SignalR) for a policy evaluation update on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "PolicyTypeRef": {
        "description": "Policy type reference.",
        "type": "object",
        "properties": {
          "displayName": {
            "description": "Display name of the policy type.",
            "type": "string"
          },
          "id": {
            "description": "The policy type ID.",
            "type": "string",
            "format": "uuid"
          },
          "url": {
            "description": "The URL where the policy type can be retrieved.",
            "type": "string"
          }
        }
      },
      "PullRequestCreatedEvent": {
        "description": "Real time event (SignalR) for pull request creation",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "PullRequestTabExtensionConfig": {
        "description": "Initial config contract sent to extensions creating tabs on the pull request page",
        "type": "object",
        "properties": {
          "pullRequestId": {
            "type": "integer",
            "format": "int32"
          },
          "repositoryId": {
            "type": "string"
          }
        }
      },
      "RealTimePullRequestEvent": {
        "description": "Base contract for a real time pull request event (SignalR)",
        "type": "object",
        "properties": {
          "eventId": {
            "description": "The id of this event. Can be used to track send/receive state between client and server.",
            "type": "string",
            "format": "uuid"
          },
          "pullRequestId": {
            "description": "The id of the pull request this event was generated for.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReferenceLinks": {
        "description": "The class to represent a collection of REST reference links.",
        "type": "object",
        "properties": {
          "links": {
            "description": "The readonly view of the links.  Because Reference links are readonly, we only want to expose them as read only.",
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ResourceRef": {
        "description": "",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        }
      },
      "RetargetEvent": {
        "description": "Real time event (SignalR) for when the target branch of a pull request is changed",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "ReviewersUpdatedEvent": {
        "description": "Real time event (SignalR) for an update to reviewers on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "ReviewersVotesResetEvent": {
        "description": "Real time event (SignalR) for reviewer votes being reset on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "ReviewerVoteUpdatedEvent": {
        "description": "Real time event (SignalR) for a reviewer vote update on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "ShareNotificationContext": {
        "description": "Context used while sharing a pull request.",
        "type": "object",
        "properties": {
          "message": {
            "description": "Optional user note or message.",
            "type": "string"
          },
          "receivers": {
            "description": "Identities of users who will receive a share notification.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityRef"
            }
          }
        }
      },
      "SourceToTargetRef": {
        "description": "",
        "type": "object",
        "properties": {
          "sourceRef": {
            "description": "The source ref to copy. For example, refs/heads/master.",
            "type": "string"
          },
          "targetRef": {
            "description": "The target ref to update. For example, refs/heads/master.",
            "type": "string"
          }
        }
      },
      "StatusAddedEvent": {
        "description": "Real time event (SignalR) for an added status on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "StatusesDeletedEvent": {
        "description": "Real time event (SignalR) for deleted statuses on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "StatusUpdatedEvent": {
        "description": "Real time event (SignalR) for a status update on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "SupportedIde": {
        "description": "Represents a Supported IDE entity.",
        "type": "object",
        "properties": {
          "downloadUrl": {
            "description": "The download URL for the IDE.",
            "type": "string"
          },
          "ideType": {
            "description": "The type of the IDE.",
            "enum": [
              "unknown",
              "androidStudio",
              "appCode",
              "cLion",
              "dataGrip",
              "eclipse",
              "intelliJ",
              "mps",
              "phpStorm",
              "pyCharm",
              "rubyMine",
              "tower",
              "visualStudio",
              "vsCode",
              "webStorm"
            ],
            "x-ms-enum": {
              "name": "SupportedIdeType",
              "values": [
                {
                  "value": "unknown",
                  "description": ""
                },
                {
                  "value": "androidStudio",
                  "description": ""
                },
                {
                  "value": "appCode",
                  "description": ""
                },
                {
                  "value": "cLion",
                  "description": ""
                },
                {
                  "value": "dataGrip",
                  "description": ""
                },
                {
                  "value": "eclipse",
                  "description": ""
                },
                {
                  "value": "intelliJ",
                  "description": ""
                },
                {
                  "value": "mps",
                  "description": ""
                },
                {
                  "value": "phpStorm",
                  "description": ""
                },
                {
                  "value": "pyCharm",
                  "description": ""
                },
                {
                  "value": "rubyMine",
                  "description": ""
                },
                {
                  "value": "tower",
                  "description": ""
                },
                {
                  "value": "visualStudio",
                  "description": ""
                },
                {
                  "value": "vsCode",
                  "description": ""
                },
                {
                  "value": "webStorm",
                  "description": ""
                }
              ]
            }
          },
          "name": {
            "description": "The name of the IDE.",
            "type": "string"
          },
          "protocolHandlerUrl": {
            "description": "The URL to open the protocol handler for the IDE.",
            "type": "string"
          },
          "supportedPlatforms": {
            "description": "A list of SupportedPlatforms.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TeamProjectCollectionReference": {
        "description": "Reference object for a TeamProjectCollection.",
        "type": "object",
        "properties": {
          "avatarUrl": {
            "description": "Collection avatar Url.",
            "type": "string"
          },
          "id": {
            "description": "Collection Id.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "Collection Name.",
            "type": "string"
          },
          "url": {
            "description": "Collection REST Url.",
            "type": "string"
          }
        }
      },
      "TeamProjectReference": {
        "description": "Represents a shallow reference to a TeamProject.",
        "type": "object",
        "properties": {
          "abbreviation": {
            "description": "Project abbreviation.",
            "type": "string"
          },
          "defaultTeamImageUrl": {
            "description": "Url to default team identity image.",
            "type": "string"
          },
          "description": {
            "description": "The project's description (if any).",
            "type": "string"
          },
          "id": {
            "description": "Project identifier.",
            "type": "string",
            "format": "uuid"
          },
          "lastUpdateTime": {
            "description": "Project last update time.",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Project name.",
            "type": "string"
          },
          "revision": {
            "description": "Project revision.",
            "type": "integer",
            "format": "int64"
          },
          "state": {
            "description": "Project state.",
            "enum": [
              "deleting",
              "new",
              "wellFormed",
              "createPending",
              "all",
              "unchanged",
              "deleted"
            ],
            "x-ms-enum": {
              "name": "ProjectState",
              "values": [
                {
                  "value": "deleting",
                  "description": "Project is in the process of being deleted."
                },
                {
                  "value": "new",
                  "description": "Project is in the process of being created."
                },
                {
                  "value": "wellFormed",
                  "description": "Project is completely created and ready to use."
                },
                {
                  "value": "createPending",
                  "description": "Project has been queued for creation, but the process has not yet started."
                },
                {
                  "value": "all",
                  "description": "All projects regardless of state except Deleted."
                },
                {
                  "value": "unchanged",
                  "description": "Project has not been changed."
                },
                {
                  "value": "deleted",
                  "description": "Project has been deleted."
                }
              ]
            }
          },
          "url": {
            "description": "Url to the full version of the object.",
            "type": "string"
          },
          "visibility": {
            "description": "Project visibility.",
            "enum": [
              "private",
              "public"
            ],
            "x-ms-enum": {
              "name": "ProjectVisibility",
              "values": [
                {
                  "value": "private",
                  "description": "The project is only visible to users with explicit access."
                },
                {
                  "value": "public",
                  "description": "The project is visible to all."
                }
              ]
            }
          }
        }
      },
      "TfvcBranch": {
        "description": "Class representing a branch object.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TfvcBranchRef"
          }
        ],
        "properties": {
          "children": {
            "description": "List of children for the branch.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TfvcBranch"
            }
          },
          "mappings": {
            "description": "List of branch mappings.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TfvcBranchMapping"
            }
          },
          "parent": {
            "$ref": "#/components/schemas/TfvcShallowBranchRef"
          },
          "relatedBranches": {
            "description": "List of paths of the related branches.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TfvcShallowBranchRef"
            }
          }
        }
      },
      "TfvcBranchMapping": {
        "description": "A branch mapping.",
        "type": "object",
        "properties": {
          "depth": {
            "description": "Depth of the branch.",
            "type": "string"
          },
          "serverItem": {
            "description": "Server item for the branch.",
            "type": "string"
          },
          "type": {
            "description": "Type of the branch.",
            "type": "string"
          }
        }
      },
      "TfvcBranchRef": {
        "description": "Metadata for a branchref.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TfvcShallowBranchRef"
          }
        ],
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "createdDate": {
            "description": "Creation date of the branch.",
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "description": "Branch description.",
            "type": "string"
          },
          "isDeleted": {
            "description": "Is the branch deleted?",
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "url": {
            "description": "URL to retrieve the item.",
            "type": "string"
          }
        }
      },
      "TfvcChange": {
        "description": "A change.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Change"
          }
        ],
        "properties": {
          "mergeSources": {
            "description": "List of merge sources in case of rename or branch creation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TfvcMergeSource"
            }
          },
          "pendingVersion": {
            "description": "Version at which a (shelved) change was pended against",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TfvcChangeset": {
        "description": "A collection of changes.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TfvcChangesetRef"
          }
        ],
        "properties": {
          "accountId": {
            "description": "Changeset Account Id also known as Organization Id.",
            "type": "string",
            "format": "uuid"
          },
          "changes": {
            "description": "List of associated changes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TfvcChange"
            }
          },
          "checkinNotes": {
            "description": "List of Checkin Notes for the changeset.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckinNote"
            }
          },
          "collectionId": {
            "description": "Changeset collection Id.",
            "type": "string",
            "format": "uuid"
          },
          "hasMoreChanges": {
            "description": "True if more changes are available.",
            "type": "boolean"
          },
          "policyOverride": {
            "$ref": "#/components/schemas/TfvcPolicyOverrideInfo"
          },
          "teamProjectIds": {
            "description": "Team Project Ids for the changeset.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "workItems": {
            "description": "List of work items associated with the changeset.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedWorkItem"
            }
          }
        }
      },
      "TfvcChangesetRef": {
        "description": "Metadata for a changeset.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "author": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "changesetId": {
            "description": "Changeset Id.",
            "type": "integer",
            "format": "int32"
          },
          "checkedInBy": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "comment": {
            "description": "Comment for the changeset.",
            "type": "string"
          },
          "commentTruncated": {
            "description": "Was the Comment result truncated?",
            "type": "boolean"
          },
          "createdDate": {
            "description": "Creation date of the changeset.",
            "type": "string",
            "format": "date-time"
          },
          "url": {
            "description": "URL to retrieve the item.",
            "type": "string"
          }
        }
      },
      "TfvcChangesetSearchCriteria": {
        "description": "Criteria used in a search for change lists.",
        "type": "object",
        "properties": {
          "author": {
            "description": "Alias or display name of user who made the changes.",
            "type": "string"
          },
          "followRenames": {
            "description": "Whether or not to follow renames for the given item being queried.",
            "type": "boolean"
          },
          "fromDate": {
            "description": "If provided, only include changesets created after this date (string).",
            "type": "string"
          },
          "fromId": {
            "description": "If provided, only include changesets after this changesetID.",
            "type": "integer",
            "format": "int32"
          },
          "includeLinks": {
            "description": "Whether to include the _links field on the shallow references.",
            "type": "boolean"
          },
          "itemPath": {
            "description": "Path of item to search under.",
            "type": "string"
          },
          "mappings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TfvcMappingFilter"
            }
          },
          "toDate": {
            "description": "If provided, only include changesets created before this date (string).",
            "type": "string"
          },
          "toId": {
            "description": "If provided, a version descriptor for the latest change list to include.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TfvcChangesetsRequestData": {
        "description": "Request body for Get batched changesets.",
        "type": "object",
        "properties": {
          "changesetIds": {
            "description": "List of changeset Ids.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "commentLength": {
            "description": "Max length of the comment.",
            "type": "integer",
            "format": "int32"
          },
          "includeLinks": {
            "description": "Whether to include the _links field on the shallow references",
            "type": "boolean"
          }
        }
      },
      "TfvcCheckinEventData": {
        "description": "",
        "type": "object",
        "properties": {
          "changeset": {
            "$ref": "#/components/schemas/TfvcChangeset"
          },
          "project": {
            "$ref": "#/components/schemas/TeamProjectReference"
          }
        }
      },
      "TfvcHistoryEntry": {
        "description": "",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/HistoryEntry"
          }
        ],
        "properties": {
          "encoding": {
            "description": "The encoding of the item at this point in history (only relevant for File history, not folders)",
            "type": "integer",
            "format": "int32"
          },
          "fileId": {
            "description": "The file id of the item at this point in history (only relevant for File history, not folders)",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TfvcItem": {
        "description": "Metadata for an item.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ItemModel"
          }
        ],
        "properties": {
          "changeDate": {
            "description": "Item changed datetime.",
            "type": "string",
            "format": "date-time"
          },
          "deletionId": {
            "description": "Greater than 0 if item is deleted.",
            "type": "integer",
            "format": "int32"
          },
          "encoding": {
            "description": "File encoding from database, -1 represents binary.",
            "type": "integer",
            "format": "int32"
          },
          "hashValue": {
            "description": "MD5 hash as a base 64 string, applies to files only.",
            "type": "string"
          },
          "isBranch": {
            "description": "True if item is a branch.",
            "type": "boolean"
          },
          "isPendingChange": {
            "description": "True if there is a change pending.",
            "type": "boolean"
          },
          "size": {
            "description": "The size of the file, if applicable.",
            "type": "integer",
            "format": "int64"
          },
          "version": {
            "description": "Changeset version Id.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TfvcItemDescriptor": {
        "description": "Item path and Version descriptor properties",
        "type": "object",
        "properties": {
          "path": {
            "description": "Item path.",
            "type": "string"
          },
          "recursionLevel": {
            "description": "Defaults to OneLevel.",
            "enum": [
              "none",
              "oneLevel",
              "oneLevelPlusNestedEmptyFolders",
              "full"
            ],
            "x-ms-enum": {
              "name": "VersionControlRecursionType",
              "values": [
                {
                  "value": "none",
                  "description": "Only return the specified item."
                },
                {
                  "value": "oneLevel",
                  "description": "Return the specified item and its direct children."
                },
                {
                  "value": "oneLevelPlusNestedEmptyFolders",
                  "description": "Return the specified item and its direct children, as well as recursive chains of nested child folders that only contain a single folder."
                },
                {
                  "value": "full",
                  "description": "Return specified item and all descendants"
                }
              ]
            }
          },
          "version": {
            "description": "Specify the desired version, can be null or empty string only if VersionType is latest or tip.",
            "type": "string"
          },
          "versionOption": {
            "description": "Defaults to None.",
            "enum": [
              "none",
              "previous",
              "useRename"
            ],
            "x-ms-enum": {
              "name": "TfvcVersionOption",
              "values": [
                {
                  "value": "none",
                  "description": "None."
                },
                {
                  "value": "previous",
                  "description": "Return the previous version."
                },
                {
                  "value": "useRename",
                  "description": "Only usuable with versiontype MergeSource and integer versions, uses RenameSource identifier instead of Merge identifier."
                }
              ]
            }
          },
          "versionType": {
            "description": "Defaults to Latest.",
            "enum": [
              "none",
              "changeset",
              "shelveset",
              "change",
              "date",
              "latest",
              "tip",
              "mergeSource"
            ],
            "x-ms-enum": {
              "name": "TfvcVersionType",
              "values": [
                {
                  "value": "none",
                  "description": "Version is treated as a ChangesetId."
                },
                {
                  "value": "changeset",
                  "description": "Version is treated as a ChangesetId."
                },
                {
                  "value": "shelveset",
                  "description": "Version is treated as a Shelveset name and owner."
                },
                {
                  "value": "change",
                  "description": "Version is treated as a Change."
                },
                {
                  "value": "date",
                  "description": "Version is treated as a Date."
                },
                {
                  "value": "latest",
                  "description": "If Version is defined the Latest of that Version will be used, if no version is defined the latest ChangesetId will be used."
                },
                {
                  "value": "tip",
                  "description": "Version will be treated as a Tip, if no version is defined latest will be used."
                },
                {
                  "value": "mergeSource",
                  "description": "Version will be treated as a MergeSource."
                }
              ]
            }
          }
        }
      },
      "TfvcItemPreviousHash": {
        "description": "Metadata for an item including the previous hash value for files.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TfvcItem"
          }
        ],
        "properties": {
          "previousHashValue": {
            "description": "MD5 hash as a base 64 string, applies to files only.",
            "type": "string"
          }
        }
      },
      "TfvcItemRequestData": {
        "description": "Request body used by Get Items Batch",
        "type": "object",
        "properties": {
          "includeContentMetadata": {
            "description": "If true, include metadata about the file type",
            "type": "boolean"
          },
          "includeLinks": {
            "description": "Whether to include the _links field on the shallow references",
            "type": "boolean"
          },
          "itemDescriptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TfvcItemDescriptor"
            }
          }
        }
      },
      "TfvcLabel": {
        "description": "Metadata for a label.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TfvcLabelRef"
          }
        ],
        "properties": {
          "items": {
            "description": "List of items.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TfvcItem"
            }
          }
        }
      },
      "TfvcLabelRef": {
        "description": "Metadata for a Label.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "description": {
            "description": "Label description.",
            "type": "string"
          },
          "id": {
            "description": "Label Id.",
            "type": "integer",
            "format": "int32"
          },
          "labelScope": {
            "description": "Label scope.",
            "type": "string"
          },
          "modifiedDate": {
            "description": "Last modified datetime for the label.",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "Label name.",
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "url": {
            "description": "Label Url.",
            "type": "string"
          }
        }
      },
      "TfvcLabelRequestData": {
        "description": "",
        "type": "object",
        "properties": {
          "includeLinks": {
            "description": "Whether to include the _links field on the shallow references",
            "type": "boolean"
          },
          "itemLabelFilter": {
            "type": "string"
          },
          "labelScope": {
            "type": "string"
          },
          "maxItemCount": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          }
        }
      },
      "TfvcMappingFilter": {
        "description": "MappingFilter can be used to include or exclude specific paths.",
        "type": "object",
        "properties": {
          "exclude": {
            "description": "True if ServerPath should be excluded.",
            "type": "boolean"
          },
          "serverPath": {
            "description": "Path to be included or excluded.",
            "type": "string"
          }
        }
      },
      "TfvcMergeSource": {
        "description": "",
        "type": "object",
        "properties": {
          "isRename": {
            "description": "Indicates if this a rename source. If false, it is a merge source.",
            "type": "boolean"
          },
          "serverItem": {
            "description": "The server item of the merge source.",
            "type": "string"
          },
          "versionFrom": {
            "description": "Start of the version range.",
            "type": "integer",
            "format": "int32"
          },
          "versionTo": {
            "description": "End of the version range.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TfvcPolicyFailureInfo": {
        "description": "Policy failure information.",
        "type": "object",
        "properties": {
          "message": {
            "description": "Policy failure message.",
            "type": "string"
          },
          "policyName": {
            "description": "Name of the policy that failed.",
            "type": "string"
          }
        }
      },
      "TfvcPolicyOverrideInfo": {
        "description": "Information on the policy override.",
        "type": "object",
        "properties": {
          "comment": {
            "description": "Overidden policy comment.",
            "type": "string"
          },
          "policyFailures": {
            "description": "Information on the failed policy that was overridden.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TfvcPolicyFailureInfo"
            }
          }
        }
      },
      "TfvcShallowBranchRef": {
        "description": "This is the shallow branchref class.",
        "type": "object",
        "properties": {
          "path": {
            "description": "Path for the branch.",
            "type": "string"
          }
        }
      },
      "TfvcShelveset": {
        "description": "Metadata for a shelveset.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TfvcShelvesetRef"
          }
        ],
        "properties": {
          "changes": {
            "description": "List of changes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TfvcChange"
            }
          },
          "notes": {
            "description": "List of checkin notes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckinNote"
            }
          },
          "policyOverride": {
            "$ref": "#/components/schemas/TfvcPolicyOverrideInfo"
          },
          "workItems": {
            "description": "List of associated workitems.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssociatedWorkItem"
            }
          }
        }
      },
      "TfvcShelvesetRef": {
        "description": "Metadata for a shallow shelveset.",
        "type": "object",
        "properties": {
          "_links": {
            "$ref": "#/components/schemas/ReferenceLinks"
          },
          "comment": {
            "description": "Shelveset comment.",
            "type": "string"
          },
          "commentTruncated": {
            "description": "Shelveset comment truncated as applicable.",
            "type": "boolean"
          },
          "createdDate": {
            "description": "Shelveset create date.",
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "description": "Shelveset Id.",
            "type": "string"
          },
          "name": {
            "description": "Shelveset name.",
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/IdentityRef"
          },
          "url": {
            "description": "Shelveset Url.",
            "type": "string"
          }
        }
      },
      "TfvcShelvesetRequestData": {
        "description": "",
        "type": "object",
        "properties": {
          "includeDetails": {
            "description": "Whether to include policyOverride and notes Only applies when requesting a single deep shelveset",
            "type": "boolean"
          },
          "includeLinks": {
            "description": "Whether to include the _links field on the shallow references. Does not apply when requesting a single deep shelveset object. Links will always be included in the deep shelveset.",
            "type": "boolean"
          },
          "includeWorkItems": {
            "description": "Whether to include workItems",
            "type": "boolean"
          },
          "maxChangeCount": {
            "description": "Max number of changes to include",
            "type": "integer",
            "format": "int32"
          },
          "maxCommentLength": {
            "description": "Max length of comment",
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "description": "Shelveset name",
            "type": "string"
          },
          "owner": {
            "description": "Owner's ID. Could be a name or a guid.",
            "type": "string"
          }
        }
      },
      "TfvcStatistics": {
        "description": "",
        "type": "object",
        "properties": {
          "changesetId": {
            "description": "Id of the last changeset the stats are based on.",
            "type": "integer",
            "format": "int32"
          },
          "fileCountTotal": {
            "description": "Count of files at the requested scope.",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "TfvcVersionDescriptor": {
        "description": "Version descriptor properties.",
        "type": "object",
        "properties": {
          "version": {
            "description": "Version object.",
            "type": "string"
          },
          "versionOption": {
            "enum": [
              "none",
              "previous",
              "useRename"
            ],
            "x-ms-enum": {
              "name": "TfvcVersionOption",
              "values": [
                {
                  "value": "none",
                  "description": "None."
                },
                {
                  "value": "previous",
                  "description": "Return the previous version."
                },
                {
                  "value": "useRename",
                  "description": "Only usuable with versiontype MergeSource and integer versions, uses RenameSource identifier instead of Merge identifier."
                }
              ]
            }
          },
          "versionType": {
            "enum": [
              "none",
              "changeset",
              "shelveset",
              "change",
              "date",
              "latest",
              "tip",
              "mergeSource"
            ],
            "x-ms-enum": {
              "name": "TfvcVersionType",
              "values": [
                {
                  "value": "none",
                  "description": "Version is treated as a ChangesetId."
                },
                {
                  "value": "changeset",
                  "description": "Version is treated as a ChangesetId."
                },
                {
                  "value": "shelveset",
                  "description": "Version is treated as a Shelveset name and owner."
                },
                {
                  "value": "change",
                  "description": "Version is treated as a Change."
                },
                {
                  "value": "date",
                  "description": "Version is treated as a Date."
                },
                {
                  "value": "latest",
                  "description": "If Version is defined the Latest of that Version will be used, if no version is defined the latest ChangesetId will be used."
                },
                {
                  "value": "tip",
                  "description": "Version will be treated as a Tip, if no version is defined latest will be used."
                },
                {
                  "value": "mergeSource",
                  "description": "Version will be treated as a MergeSource."
                }
              ]
            }
          }
        }
      },
      "TitleDescriptionUpdatedEvent": {
        "description": "Real time event (SignalR) for a title/description update on a pull request",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/RealTimePullRequestEvent"
          }
        ],
        "properties": {}
      },
      "UpdateRefsRequest": {
        "description": "",
        "type": "object",
        "properties": {
          "refUpdateRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GitRefUpdate"
            }
          },
          "updateMode": {
            "enum": [
              "bestEffort",
              "allOrNone"
            ],
            "x-ms-enum": {
              "name": "GitRefUpdateMode",
              "values": [
                {
                  "value": "bestEffort",
                  "description": "Indicates the Git protocol model where any refs that can be updated will be updated, but any failures will not prevent other updates from succeeding."
                },
                {
                  "value": "allOrNone",
                  "description": "Indicates that all ref updates must succeed or none will succeed. All ref updates will be atomically written. If any failure is encountered, previously successful updates will be rolled back and the entire operation will fail."
                }
              ]
            }
          }
        }
      },
      "VersionControlProjectInfo": {
        "description": "",
        "type": "object",
        "properties": {
          "defaultSourceControlType": {
            "enum": [
              "tfvc",
              "git"
            ],
            "x-ms-enum": {
              "name": "SourceControlTypes",
              "values": [
                {
                  "value": "tfvc",
                  "description": ""
                },
                {
                  "value": "git",
                  "description": ""
                }
              ]
            }
          },
          "project": {
            "$ref": "#/components/schemas/TeamProjectReference"
          },
          "supportsGit": {
            "type": "boolean"
          },
          "supportsTFVC": {
            "type": "boolean"
          }
        }
      },
      "VersionedPolicyConfigurationRef": {
        "description": "A particular revision for a policy configuration.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyConfigurationRef"
          }
        ],
        "properties": {
          "revision": {
            "description": "The policy configuration revision ID.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "WebApiCreateTagRequestData": {
        "description": "The representation of data needed to create a tag definition which is sent across the wire.",
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the tag definition that will be created.",
            "type": "string"
          }
        }
      },
      "WebApiTagDefinition": {
        "description": "The representation of a tag definition which is sent across the wire.",
        "type": "object",
        "properties": {
          "active": {
            "description": "Whether or not the tag definition is active.",
            "type": "boolean"
          },
          "id": {
            "description": "ID of the tag definition.",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "The name of the tag definition.",
            "type": "string"
          },
          "url": {
            "description": "Resource URL for the Tag Definition.",
            "type": "string"
          }
        }
      },
      "AttributeDescriptor": {
        "description": "Identifies an attribute with a name and a container.",
        "type": "object",
        "properties": {
          "attributeName": {
            "description": "The name of the attribute.",
            "type": "string"
          },
          "containerName": {
            "description": "The container the attribute resides in.",
            "type": "string"
          }
        }
      },
      "AttributesContainer": {
        "description": "Stores a set of named profile attributes.",
        "type": "object",
        "properties": {
          "attributes": {
            "description": "The attributes stored by the container.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ProfileAttribute"
            }
          },
          "containerName": {
            "description": "The name of the container.",
            "type": "string"
          },
          "revision": {
            "description": "The maximum revision number of any attribute within the container.",
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Avatar": {
        "description": "",
        "type": "object",
        "properties": {
          "isAutoGenerated": {
            "type": "boolean"
          },
          "size": {
            "enum": [
              "small",
              "medium",
              "large"
            ],
            "x-ms-enum": {
              "name": "AvatarSize",
              "values": [
                {
                  "value": "small",
                  "description": ""
                },
                {
                  "value": "medium",
                  "description": ""
                },
                {
                  "value": "large",
                  "description": ""
                }
              ]
            }
          },
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            }
          }
        }
      },
      "CoreProfileAttribute": {
        "description": "A profile attribute which always has a value for each profile.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProfileAttributeBase"
          }
        ],
        "properties": {}
      },
      "CreateProfileContext": {
        "description": "",
        "type": "object",
        "properties": {
          "ciData": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "contactWithOffers": {
            "type": "boolean"
          },
          "countryName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "emailAddress": {
            "type": "string"
          },
          "hasAccount": {
            "type": "boolean"
          },
          "language": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "profileState": {
            "description": "The current state of the profile.",
            "enum": [
              "custom",
              "customReadOnly",
              "readOnly"
            ],
            "x-ms-enum": {
              "name": "ProfileState",
              "values": [
                {
                  "value": "custom",
                  "description": "The profile is in use."
                },
                {
                  "value": "customReadOnly",
                  "description": "The profile is in use, but can only be read."
                },
                {
                  "value": "readOnly",
                  "description": "The profile may only be read."
                }
              ]
            }
          }
        }
      },
      "GeoRegion": {
        "description": "",
        "type": "object",
        "properties": {
          "regionCode": {
            "type": "string"
          }
        }
      },
      "JObject": {
        "description": "Represents a JSON object.",
        "type": "object",
        "properties": {
          "item": {
            "type": "string",
            "format": "JToken"
          },
          "type": {
            "description": "Gets the node type for this JToken.",
            "type": "string",
            "format": "JTokenType"
          }
        }
      },
      "Profile": {
        "description": "A user profile.",
        "type": "object",
        "properties": {
          "applicationContainer": {
            "$ref": "#/components/schemas/AttributesContainer"
          },
          "coreAttributes": {
            "description": "The core attributes of this profile.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CoreProfileAttribute"
            }
          },
          "coreRevision": {
            "description": "The maximum revision number of any attribute.",
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "description": "The unique identifier of the profile.",
            "type": "string",
            "format": "uuid"
          },
          "profileState": {
            "description": "The current state of the profile.",
            "enum": [
              "custom",
              "customReadOnly",
              "readOnly"
            ],
            "x-ms-enum": {
              "name": "ProfileState",
              "values": [
                {
                  "value": "custom",
                  "description": "The profile is in use."
                },
                {
                  "value": "customReadOnly",
                  "description": "The profile is in use, but can only be read."
                },
                {
                  "value": "readOnly",
                  "description": "The profile may only be read."
                }
              ]
            }
          },
          "revision": {
            "description": "The maximum revision number of any attribute.",
            "type": "integer",
            "format": "int32"
          },
          "timeStamp": {
            "description": "The time at which this profile was last changed.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProfileAttribute": {
        "description": "A named object associated with a profile.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProfileAttributeBase"
          }
        ],
        "properties": {}
      },
      "ProfileAttributeBase": {
        "description": "",
        "type": "object",
        "properties": {
          "descriptor": {
            "$ref": "#/components/schemas/AttributeDescriptor"
          },
          "revision": {
            "description": "The revision number of the attribute.",
            "type": "integer",
            "format": "int32"
          },
          "timeStamp": {
            "description": "The time the attribute was last changed.",
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "description": "The value of the attribute.",
            "type": "string",
            "format": "T"
          }
        }
      },
      "ProfileRegion": {
        "description": "Country/region information",
        "type": "object",
        "properties": {
          "code": {
            "description": "The two-letter code defined in ISO 3166 for the country/region.",
            "type": "string"
          },
          "name": {
            "description": "Localized country/region name",
            "type": "string"
          }
        }
      },
      "ProfileRegions": {
        "description": "Container of country/region information",
        "type": "object",
        "properties": {
          "noticeContactConsentRequirementRegions": {
            "description": "List of country/region code with contact consent requirement type of notice",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optOutContactConsentRequirementRegions": {
            "description": "List of country/region code with contact consent requirement type of opt-out",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "regions": {
            "description": "List of country/regions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfileRegion"
            }
          }
        }
      }
    }
  }
}